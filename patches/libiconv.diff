--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,312 @@
+cmake_minimum_required(VERSION 3.2)
+
+project(iconv VERSION 1.14 LANGUAGES C)
+
+if(WIN32)
+  set(CMAKE_DEBUG_POSTFIX "d")
+endif()
+
+add_executable(genflags
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/genflags.c)
+target_include_directories(genflags PUBLIC
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/lib>
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>)
+# add_custom_target(gen-flags
+#   COMMAND genflags >
+#   ${CMAKE_CURRENT_SOURCE_DIR}/lib/flags.h
+#   BYPRODUCTS ${CMAKE_CURRENT_SOURCE_DIR}/lib/flags.h)
+
+add_executable(genaliases
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/genaliases.c)
+target_include_directories(genaliases PUBLIC
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/lib>
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>)
+# add_custom_target(gen-aliases
+#   COMMAND genaliases >
+#   ${CMAKE_CURRENT_SOURCE_DIR}/lib/aliases.h
+#   BYPRODUCTS ${CMAKE_CURRENT_SOURCE_DIR}/lib/aliases.h)
+
+add_library(${PROJECT_NAME} STATIC
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/armscii_8.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/ascii.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/atarist.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/aliases.gperf
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/aliases.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/aliases_aix.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/aliases_aix_sysaix.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/aliases_dos.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/aliases_extra.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/aliases_osf1.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/aliases_osf1_sysosf1.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/aliases_sysaix.gperf
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/aliases_sysaix.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/aliases_syshpux.gperf
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/aliases_syshpux.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/aliases_sysosf1.gperf
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/aliases_sysosf1.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/aliases_syssolaris.gperf
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/aliases_syssolaris.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/aliases2.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/big5hkscs2008.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/c99.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/ces_big5.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/ces_gbk.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cjk_variants.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cns11643.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cns11643_1.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cns11643_2.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cns11643_3.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cns11643_4.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cns11643_4a.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cns11643_4b.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cns11643_5.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cns11643_6.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cns11643_7.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cns11643_15.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cns11643_inv.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/config.h.in
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/converters.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp437.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp737.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp775.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp850.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp852.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp853.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp855.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp856.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp857.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp858.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp860.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp861.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp862.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp863.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp864.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp865.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp866.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp869.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp874.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp922.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp932.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp932ext.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp936.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp936ext.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp943.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp949.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp950.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp950ext.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp1046.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp1124.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp1125.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp1129.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp1131.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp1133.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp1161.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp1162.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp1163.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp1250.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp1251.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp1252.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp1253.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp1254.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp1255.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp1256.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp1257.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp1258.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp50221_0208_ext.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/cp50221_0212_ext.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/dec_hanyu.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/dec_kanji.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/encodings.def
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/encodings_aix.def
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/encodings_dos.def
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/encodings_extra.def
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/encodings_local.def
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/encodings_osf1.def
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/euc_cn.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/euc_jisx0213.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/euc_jp.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/euc_kr.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/euc_tw.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/flushwc.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/gb2312.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/gb12345.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/gb12345ext.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/gb18030.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/gb18030ext.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/gb18030uni.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/gbk.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/gbkext_inv.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/gbkext1.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/gbkext2.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/georgian_academy.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/georgian_ps.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/hkscs1999.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/hkscs2001.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/hkscs2004.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/hkscs2008.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/hp_roman8.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/hz.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/iconv.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/iconv_open1.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/iconv_open2.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/iso646_cn.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/iso646_jp.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/iso2022_cn.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/iso2022_cnext.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/iso2022_jp.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/iso2022_jp1.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/iso2022_jp2.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/iso2022_jp3.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/iso2022_jpms.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/iso2022_kr.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/iso8859_1.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/iso8859_2.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/iso8859_3.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/iso8859_4.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/iso8859_5.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/iso8859_6.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/iso8859_7.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/iso8859_8.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/iso8859_9.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/iso8859_10.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/iso8859_11.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/iso8859_13.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/iso8859_14.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/iso8859_15.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/iso8859_16.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/isoir165.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/isoir165ext.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/java.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/jisx0201.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/jisx0208.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/jisx0212.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/jisx0213.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/johab.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/johab_hangul.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/koi8_r.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/koi8_ru.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/koi8_t.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/koi8_u.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/ksc5601.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/loop_unicode.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/loop_wchar.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/loops.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/mac_arabic.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/mac_centraleurope.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/mac_croatian.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/mac_cyrillic.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/mac_greek.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/mac_hebrew.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/mac_iceland.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/mac_roman.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/mac_romania.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/mac_thai.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/mac_turkish.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/mac_ukraine.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/Makefile.in
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/mulelao.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/nextstep.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/pt154.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/relocatable.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/relocatable.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/riscos1.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/rk1048.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/shift_jisx0213.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/sjis.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/tcvn.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/tds565.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/tis620.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/translit.def
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/translit.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/ucs2.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/ucs2be.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/ucs2internal.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/ucs2le.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/ucs2swapped.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/ucs4.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/ucs4be.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/ucs4internal.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/ucs4le.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/ucs4swapped.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/uhc_1.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/uhc_2.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/utf7.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/utf8.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/utf16.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/utf16be.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/utf16le.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/utf32.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/utf32be.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/utf32le.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/vietcomb.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/viscii.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/aliases_aix.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/aliases_dos.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/aliases_extra.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/aliases_osf1.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/aliases2.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/armscii_8.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/ascii.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/atarist.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/big5.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/big5_2003.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/big5hkscs1999.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/big5hkscs2001.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/big5hkscs2004.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/libcharset/lib/localcharset.c
+)
+add_library(${PROJECT_NAME}::${PROJECT_NAME} ALIAS ${PROJECT_NAME})
+target_include_directories(
+  iconv PRIVATE
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/lib> 
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/libcharset/include> 
+  INTERFACE
+  $<INSTALL_INTERFACE:include>
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
+)
+
+include(CMakePackageConfigHelpers)
+write_basic_package_version_file(
+  ${CMAKE_CURRENT_BINARY_DIR}/iconv-config-version.cmake
+  VERSION ${iconv_VERSION}
+  COMPATIBILITY AnyNewerVersion
+)
+
+install(TARGETS iconv EXPORT iconv
+  RUNTIME DESTINATION bin
+  ARCHIVE DESTINATION lib
+  LIBRARY DESTINATION lib)
+
+
+install(FILES
+  ${CMAKE_CURRENT_SOURCE_DIR}/include/iconv.h
+  DESTINATION include)
+
+if(MSVC)
+  set_target_properties(iconv PROPERTIES COMPILE_PDB_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR} COMPILE_PDB_NAME libiconv COMPILE_PDB_NAME_DEBUG libiconvd)
+  install(FILES ${PROJECT_BINARY_DIR}/RelWithDebInfo/libiconv.pdb DESTINATION lib CONFIGURATIONS RelWithDebInfo)
+  install(FILES ${PROJECT_BINARY_DIR}/Debug/libiconvd.pdb DESTINATION lib CONFIGURATIONS Debug)
+endif()
+
+install(EXPORT iconv
+  FILE
+    iconv.cmake
+  NAMESPACE
+    iconv::
+  DESTINATION
+    lib/cmake/iconv
+)
+install(
+  FILES
+    cmake/iconv-config.cmake
+    ${CMAKE_CURRENT_BINARY_DIR}/iconv-config-version.cmake
+  DESTINATION
+    lib/cmake/iconv
+)
+
+export(TARGETS iconv
+  FILE
+  ${CMAKE_CURRENT_BINARY_DIR}/iconv-config.cmake
+  NAMESPACE iconv::
+)
--- /dev/null
+++ b/cmake/iconv-config.cmake
@@ -0,0 +1 @@
+include(${CMAKE_CURRENT_LIST_DIR}/iconv.cmake)
--- /dev/null
+++ b/include/iconv.h
@@ -0,0 +1,241 @@
+/* Copyright (C) 1999-2003, 2005-2006, 2008-2011 Free Software Foundation, Inc.
+   This file is part of the GNU LIBICONV Library.
+
+   The GNU LIBICONV Library is free software; you can redistribute it
+   and/or modify it under the terms of the GNU Library General Public
+   License as published by the Free Software Foundation; either version 2
+   of the License, or (at your option) any later version.
+
+   The GNU LIBICONV Library is distributed in the hope that it will be
+   useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Library General Public License for more details.
+
+   You should have received a copy of the GNU Library General Public
+   License along with the GNU LIBICONV Library; see the file COPYING.LIB.
+   If not, see <http://www.gnu.org/licenses/>.  */
+
+/* When installed, this file is called "iconv.h". */
+
+#ifndef _LIBICONV_H
+#define _LIBICONV_H
+
+#define _LIBICONV_VERSION 0x010F    /* version number: (major<<8) + minor */
+extern int _libiconv_version; /* Likewise */
+
+/* We would like to #include any system header file which could define
+   iconv_t, 1. in order to eliminate the risk that the user gets compilation
+   errors because some other system header file includes /usr/include/iconv.h
+   which defines iconv_t or declares iconv after this file, 2. when compiling
+   for LIBICONV_PLUG, we need the proper iconv_t type in order to produce
+   binary compatible code.
+   But gcc's #include_next is not portable. Thus, once libiconv's iconv.h
+   has been installed in /usr/local/include, there is no way any more to
+   include the original /usr/include/iconv.h. We simply have to get away
+   without it.
+   Ad 1. The risk that a system header file does
+   #include "iconv.h"  or  #include_next "iconv.h"
+   is small. They all do #include <iconv.h>.
+   Ad 2. The iconv_t type is a pointer type in all cases I have seen. (It
+   has to be a scalar type because (iconv_t)(-1) is a possible return value
+   from iconv_open().) */
+
+/* Define iconv_t ourselves. */
+#undef iconv_t
+#define iconv_t libiconv_t
+typedef void* iconv_t;
+
+/* Get size_t declaration.
+   Get wchar_t declaration if it exists. */
+#include <stddef.h>
+
+/* Get errno declaration and values. */
+#include <errno.h>
+/* Some systems, like SunOS 4, don't have EILSEQ. Some systems, like BSD/OS,
+   have EILSEQ in a different header.  On these systems, define EILSEQ
+   ourselves. */
+#ifndef EILSEQ
+#define EILSEQ @EILSEQ@
+#endif
+
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+
+/* Allocates descriptor for code conversion from encoding ‘fromcode’ to
+   encoding ‘tocode’. */
+#ifndef LIBICONV_PLUG
+#define iconv_open libiconv_open
+#endif
+extern iconv_t iconv_open (const char* tocode, const char* fromcode);
+
+/* Converts, using conversion descriptor ‘cd’, at most ‘*inbytesleft’ bytes
+   starting at ‘*inbuf’, writing at most ‘*outbytesleft’ bytes starting at
+   ‘*outbuf’.
+   Decrements ‘*inbytesleft’ and increments ‘*inbuf’ by the same amount.
+   Decrements ‘*outbytesleft’ and increments ‘*outbuf’ by the same amount. */
+#ifndef LIBICONV_PLUG
+#define iconv libiconv
+#endif
+extern size_t iconv (iconv_t cd, char* * inbuf, size_t *inbytesleft, char* * outbuf, size_t *outbytesleft);
+
+/* Frees resources allocated for conversion descriptor ‘cd’. */
+#ifndef LIBICONV_PLUG
+#define iconv_close libiconv_close
+#endif
+extern int iconv_close (iconv_t cd);
+
+
+#ifdef __cplusplus
+}
+#endif
+
+
+#ifndef LIBICONV_PLUG
+
+/* Nonstandard extensions. */
+
+#if 0
+#if 0
+/* Tru64 with Desktop Toolkit C has a bug: <stdio.h> must be included before
+   <wchar.h>.
+   BSD/OS 4.0.1 has a bug: <stddef.h>, <stdio.h> and <time.h> must be
+   included before <wchar.h>.  */
+#include <stddef.h>
+#include <stdio.h>
+#include <time.h>
+#endif
+#include <wchar.h>
+#endif
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/* A type that holds all memory needed by a conversion descriptor.
+   A pointer to such an object can be used as an iconv_t. */
+typedef struct {
+  void* dummy1[28];
+#if 0
+  mbstate_t dummy2;
+#endif
+} iconv_allocation_t;
+
+/* Allocates descriptor for code conversion from encoding ‘fromcode’ to
+   encoding ‘tocode’ into preallocated memory. Returns an error indicator
+   (0 or -1 with errno set). */
+#define iconv_open_into libiconv_open_into
+extern int iconv_open_into (const char* tocode, const char* fromcode,
+                            iconv_allocation_t* resultp);
+
+/* Control of attributes. */
+#define iconvctl libiconvctl
+extern int iconvctl (iconv_t cd, int request, void* argument);
+
+/* Hook performed after every successful conversion of a Unicode character. */
+typedef void (*iconv_unicode_char_hook) (unsigned int uc, void* data);
+/* Hook performed after every successful conversion of a wide character. */
+typedef void (*iconv_wide_char_hook) (wchar_t wc, void* data);
+/* Set of hooks. */
+struct iconv_hooks {
+  iconv_unicode_char_hook uc_hook;
+  iconv_wide_char_hook wc_hook;
+  void* data;
+};
+
+/* Fallback function.  Invoked when a small number of bytes could not be
+   converted to a Unicode character.  This function should process all
+   bytes from inbuf and may produce replacement Unicode characters by calling
+   the write_replacement callback repeatedly.  */
+typedef void (*iconv_unicode_mb_to_uc_fallback)
+             (const char* inbuf, size_t inbufsize,
+              void (*write_replacement) (const unsigned int *buf, size_t buflen,
+                                         void* callback_arg),
+              void* callback_arg,
+              void* data);
+/* Fallback function.  Invoked when a Unicode character could not be converted
+   to the target encoding.  This function should process the character and
+   may produce replacement bytes (in the target encoding) by calling the
+   write_replacement callback repeatedly.  */
+typedef void (*iconv_unicode_uc_to_mb_fallback)
+             (unsigned int code,
+              void (*write_replacement) (const char *buf, size_t buflen,
+                                         void* callback_arg),
+              void* callback_arg,
+              void* data);
+#if 1
+/* Fallback function.  Invoked when a number of bytes could not be converted to
+   a wide character.  This function should process all bytes from inbuf and may
+   produce replacement wide characters by calling the write_replacement
+   callback repeatedly.  */
+typedef void (*iconv_wchar_mb_to_wc_fallback)
+             (const char* inbuf, size_t inbufsize,
+              void (*write_replacement) (const wchar_t *buf, size_t buflen,
+                                         void* callback_arg),
+              void* callback_arg,
+              void* data);
+/* Fallback function.  Invoked when a wide character could not be converted to
+   the target encoding.  This function should process the character and may
+   produce replacement bytes (in the target encoding) by calling the
+   write_replacement callback repeatedly.  */
+typedef void (*iconv_wchar_wc_to_mb_fallback)
+             (wchar_t code,
+              void (*write_replacement) (const char *buf, size_t buflen,
+                                         void* callback_arg),
+              void* callback_arg,
+              void* data);
+#else
+/* If the wchar_t type does not exist, these two fallback functions are never
+   invoked.  Their argument list therefore does not matter.  */
+typedef void (*iconv_wchar_mb_to_wc_fallback) ();
+typedef void (*iconv_wchar_wc_to_mb_fallback) ();
+#endif
+/* Set of fallbacks. */
+struct iconv_fallbacks {
+  iconv_unicode_mb_to_uc_fallback mb_to_uc_fallback;
+  iconv_unicode_uc_to_mb_fallback uc_to_mb_fallback;
+  iconv_wchar_mb_to_wc_fallback mb_to_wc_fallback;
+  iconv_wchar_wc_to_mb_fallback wc_to_mb_fallback;
+  void* data;
+};
+
+/* Requests for iconvctl. */
+#define ICONV_TRIVIALP            0  /* int *argument */
+#define ICONV_GET_TRANSLITERATE   1  /* int *argument */
+#define ICONV_SET_TRANSLITERATE   2  /* const int *argument */
+#define ICONV_GET_DISCARD_ILSEQ   3  /* int *argument */
+#define ICONV_SET_DISCARD_ILSEQ   4  /* const int *argument */
+#define ICONV_SET_HOOKS           5  /* const struct iconv_hooks *argument */
+#define ICONV_SET_FALLBACKS       6  /* const struct iconv_fallbacks *argument */
+
+/* Listing of locale independent encodings. */
+#define iconvlist libiconvlist
+extern void iconvlist (int (*do_one) (unsigned int namescount,
+                                      const char * const * names,
+                                      void* data),
+                       void* data);
+
+/* Canonicalize an encoding name.
+   The result is either a canonical encoding name, or name itself. */
+extern const char * iconv_canonicalize (const char * name);
+
+/* Support for relocatable packages.  */
+
+/* Sets the original and the current installation prefix of the package.
+   Relocation simply replaces a pathname starting with the original prefix
+   by the corresponding pathname with the current prefix instead.  Both
+   prefixes should be directory names without trailing slash (i.e. use ""
+   instead of "/").  */
+extern void libiconv_set_relocation_prefix (const char *orig_prefix,
+                                            const char *curr_prefix);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
+
+
+#endif /* _LIBICONV_H */
--- a/lib/genflags.c
+++ b/lib/genflags.c
@@ -21,6 +21,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <iconv.h>
 
 /* Avoid lots of warnings from "gcc -Wall". */
 #if (__GNUC__ == 4 && __GNUC_MINOR__ >= 2) || __GNUC__ > 4
@@ -33,9 +34,16 @@
 #define USE_DOS
 #define USE_EXTRA
 
-struct loop_funcs {};
-struct iconv_fallbacks {};
-struct iconv_hooks {};
+/*
+ * Data type for general conversion loop.
+ */
+struct loop_funcs {
+  size_t (*loop_convert) (iconv_t icd,
+                          const char* * inbuf, size_t *inbytesleft,
+                          char* * outbuf, size_t *outbytesleft);
+  size_t (*loop_reset) (iconv_t icd,
+                        char* * outbuf, size_t *outbytesleft);
+};
 #include "converters.h"
 
 static void emit_encoding (struct wctomb_funcs * ofuncs, const char* c_name)
--- a/lib/iconv.c
+++ b/lib/iconv.c
@@ -22,7 +22,6 @@
 #include <limits.h>
 #include <stdlib.h>
 #include <string.h>
-#include "config.h"
 #include "localcharset.h"
 
 #ifdef __CYGWIN__
@@ -172,7 +171,7 @@ static const struct stringpool2_t stringpool2_contents = {
 };
 #define stringpool2 ((const char *) &stringpool2_contents)
 static const struct alias sysdep_aliases[] = {
-#define S(tag,name,encoding_index) { (int)(long)&((struct stringpool2_t *)0)->stringpool_##tag, encoding_index },
+#define S(tag,name,encoding_index) { offsetof(struct stringpool2_t, stringpool_##tag), encoding_index },
 #include "aliases2.h"
 #undef S
 };
@@ -248,7 +247,7 @@ iconv_t iconv_open (const char* tocode, const char* fromcode)
 }
 
 size_t iconv (iconv_t icd,
-              ICONV_CONST char* * inbuf, size_t *inbytesleft,
+              char* * inbuf, size_t *inbytesleft,
               char* * outbuf, size_t *outbytesleft)
 {
   conv_t cd = (conv_t) icd;
--- a/lib/relocatable.c
+++ b/lib/relocatable.c
@@ -24,7 +24,6 @@
 #endif
 
 #define _GL_USE_STDLIB_ALLOC 1
-#include <config.h>
 
 /* Specification.  */
 #include "relocatable.h"
--- /dev/null
+++ b/libcharset/include/localcharset.h
@@ -0,0 +1,40 @@
+/* Determine a canonical name for the current locale's character encoding.
+   Copyright (C) 2000-2003 Free Software Foundation, Inc.
+   This file is part of the GNU CHARSET Library.
+
+   This program is free software; you can redistribute it and/or modify it
+   under the terms of the GNU Library General Public License as published
+   by the Free Software Foundation; either version 2, or (at your option)
+   any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Library General Public License for more details.
+
+   You should have received a copy of the GNU Library General Public License
+   along with this program; if not, see <http://www.gnu.org/licenses/>.  */
+
+#ifndef _LOCALCHARSET_H
+#define _LOCALCHARSET_H
+
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+
+/* Determine the current locale's character encoding, and canonicalize it
+   into one of the canonical names listed in config.charset.
+   The result must not be freed; it is statically allocated.
+   If the canonical name cannot be determined, the result is a non-canonical
+   name.  */
+extern const char * locale_charset (void);
+
+
+#ifdef __cplusplus
+}
+#endif
+
+
+#endif /* _LOCALCHARSET_H */
--- a/libcharset/lib/localcharset.c
+++ b/libcharset/lib/localcharset.c
@@ -17,7 +17,9 @@
 
 /* Written by Bruno Haible <bruno@clisp.org>.  */
 
+#ifdef HAVE_CONFIG_H
 #include <config.h>
+#endif
 
 /* Specification.  */
 #include "localcharset.h"
@@ -79,7 +81,7 @@
 
 /* Get LIBDIR.  */
 #ifndef LIBDIR
-# include "configmake.h"
+//# include "configmake.h"
 #endif
 
 /* Define O_NOFOLLOW to 0 on platforms where it does not exist.  */
