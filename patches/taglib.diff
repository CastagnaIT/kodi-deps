--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -58,6 +58,11 @@
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
 endif()
 
+if(MSVC)
+  set(CMAKE_DEBUG_POSTFIX "d")
+  add_definitions(-D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE)
+endif()
+
 if(MSVC AND ENABLE_STATIC_RUNTIME)
   foreach(flag_var CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)
     string(REGEX REPLACE "/MD" "/MT" ${flag_var} "${${flag_var}}")
--- a/taglib/CMakeLists.txt
+++ b/taglib/CMakeLists.txt
@@ -344,6 +344,12 @@
 
 add_library(tag ${tag_LIB_SRCS} ${tag_HDRS})
 
+if(MSVC)
+  set_target_properties(tag PROPERTIES COMPILE_PDB_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR} COMPILE_PDB_NAME tag COMPILE_PDB_NAME_DEBUG tagd)
+  install(FILES ${PROJECT_BINARY_DIR}/RelWithDebInfo/tag.pdb DESTINATION lib CONFIGURATIONS RelWithDebInfo)
+  install(FILES ${PROJECT_BINARY_DIR}/Debug/tagd.pdb DESTINATION lib CONFIGURATIONS Debug)
+endif(MSVC)
+
 if(ZLIB_FOUND)
   target_link_libraries(tag ${ZLIB_LIBRARIES})
 endif()
--- a/taglib/mpeg/mpegfile.cpp
+++ b/taglib/mpeg/mpegfile.cpp
@@ -488,28 +488,41 @@ long MPEG::File::findID3v2()
   const ByteVector headerID = ID3v2::Header::fileIdentifier();
 
   seek(0);
+  if(readBlock(headerID.size()) == headerID)
+    return 0;
 
-  const ByteVector data = readBlock(headerID.size());
-  if(data.size() < headerID.size())
+  Header firstHeader(this, 0, true);
+  if(firstHeader.isValid())
     return -1;
 
-  if(data == headerID)
-    return 0;
+  // Look for an ID3v2 tag until reaching the first valid MPEG frame.
 
-  if(firstSyncByte(data[0]) && secondSynchByte(data[1]))
-    return -1;
+  char frameSyncBytes[2] = {};
+  char tagHeaderBytes[4] = {};
+  long position = 0;
 
-  // Look for the entire file, if neither an MEPG frame or ID3v2 tag was found
-  // at the beginning of the file.
-  // We don't care about the inefficiency of the code, since this is a seldom case.
+  while(true) {
+    seek(position);
+    const ByteVector buffer = readBlock(bufferSize());
+    if(buffer.isEmpty())
+      return -1;
 
-  const long tagOffset = find(headerID);
-  if(tagOffset < 0)
-    return -1;
+    for(unsigned int i = 0; i < buffer.size(); ++i) {
+      frameSyncBytes[0] = frameSyncBytes[1];
+      frameSyncBytes[1] = buffer[i];
+      if(firstSyncByte(frameSyncBytes[0]) && secondSynchByte(frameSyncBytes[1])) {
+        Header header(this, position + i - 1, true);
+        if(header.isValid())
+          return -1;
+      }
 
-  const long frameOffset = firstFrameOffset();
-  if(frameOffset < tagOffset)
-    return -1;
+      tagHeaderBytes[0] = tagHeaderBytes[1];
+      tagHeaderBytes[1] = tagHeaderBytes[2];
+      tagHeaderBytes[2] = buffer[i];
+      if(headerID == tagHeaderBytes)
+        return position + i - 2;
+    }
 
-  return tagOffset;
+    position += bufferSize();
+  }
 }
--- a/taglib/toolkit/tfilestream.cpp
+++ b/taglib/toolkit/tfilestream.cpp
@@ -52,9 +52,22 @@
     const DWORD access = readOnly ? GENERIC_READ : (GENERIC_READ | GENERIC_WRITE);
 
     if(!path.wstr().empty())
+#if defined(WINAPI_FAMILY) && WINAPI_FAMILY != WINAPI_FAMILY_DESKTOP_APP
+      return CreateFile2(path.wstr().c_str(), access, FILE_SHARE_READ, OPEN_EXISTING, NULL);
+#else
       return CreateFileW(path.wstr().c_str(), access, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, NULL);
+#endif
     else if(!path.str().empty())
+#if defined(WINAPI_FAMILY) && WINAPI_FAMILY != WINAPI_FAMILY_DESKTOP_APP
+    {
+      auto size = MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, path.str().data(), path.str().size(), NULL, 0);
+      std::wstring tmp(size, L'\0');
+      MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, path.str().data(), path.str().size(), &tmp[0], tmp.size());
+      return CreateFile2(tmp.c_str(), access, FILE_SHARE_READ, OPEN_EXISTING, NULL);
+    }
+#else
       return CreateFileA(path.str().c_str(), access, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, NULL);
+#endif
     else
       return InvalidFileHandle;
   }
@@ -437,7 +450,13 @@
 #ifdef _WIN32
 
   SetLastError(NO_ERROR);
+#if defined(WINAPI_FAMILY) && WINAPI_FAMILY != WINAPI_FAMILY_DESKTOP_APP
+  LARGE_INTEGER fSize;
+  GetFileSizeEx(d->file, &fSize);
+  LONGLONG fileSize = fSize.QuadPart;
+#else
   const DWORD fileSize = GetFileSize(d->file, NULL);
+#endif
   if(GetLastError() == NO_ERROR) {
     return static_cast<long>(fileSize);
   }
