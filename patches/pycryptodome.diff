--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,276 @@
+cmake_minimum_required(VERSION 3.3)
+
+project(pycryptodome VERSION 3.4.6 LANGUAGES C)
+
+option(SEPARATE_NAMESPACE "Install as Cryptodome instead of Crypto" OFF)
+
+set(NAMESPACE Crypto)
+if(SEPARATE_NAMESPACE)
+  set(NAMESPACE Cryptodome)
+endif()
+
+if(MSVC)
+  set(CMAKE_DEBUG_POSTFIX "d")
+endif()
+
+find_package(python REQUIRED NO_MODULE)
+
+include(CheckIncludeFile)
+
+CHECK_INCLUDE_FILE(intrin.h HAVE_INTRIN_H)
+CHECK_INCLUDE_FILE(cpuid.h HAVE_CPUID_H)
+  
+add_library(tomcrypt STATIC
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_hash.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_mac.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_macros.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_math.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_misc.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_pk.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_pkcs.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_prng.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_argchk.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_cfg.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_cipher.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_custom.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_des.c
+)
+
+target_include_directories(tomcrypt
+  PRIVATE
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/libtom>
+  PUBLIC
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/libtom>
+)
+
+# Hash functions
+add_library(_MD2
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/MD2.c
+)
+
+add_library(_MD4
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/MD4.c
+)
+
+add_library(_SHA256
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/SHA256.c
+)
+
+add_library(_SHA224
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/SHA224.c
+)
+
+add_library(_SHA384
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/SHA384.c
+)
+
+add_library(_SHA512
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/SHA512.c
+)
+
+add_library(_RIPEMD160
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/RIPEMD160.c
+)
+
+add_library(_keccak
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/keccak.c
+)
+
+add_library(_BLAKE2b
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/blake2b.c
+)
+
+add_library(_BLAKE2s
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/blake2s.c
+)
+
+# Block encryption algorithms
+add_library(_raw_aes
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/AES.c
+)
+
+add_library(_raw_aesni
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/AESNI.c
+)
+
+add_library(_raw_arc2
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/ARC2.c
+)
+
+add_library(_raw_blowfish
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/Blowfish.c
+)
+
+add_library(_raw_cast
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/CAST.c
+)
+
+add_library(_raw_des
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/DES.c
+)
+
+add_library(_raw_des3
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/DES3.c
+)
+
+add_library(_galois
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/galois.c
+)
+
+add_library(_cpuid
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/cpuid.c
+)
+
+# Chaining modes
+add_library(_raw_ecb
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/raw_ecb.c
+)
+
+add_library(_raw_cbc
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/raw_cbc.c
+)
+
+add_library(_raw_cfb
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/raw_cfb.c
+)
+
+add_library(_raw_ofb
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/raw_ofb.c
+)
+
+add_library(_raw_ctr
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/raw_ctr.c
+)
+
+add_library(_raw_ocb
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/raw_ocb.c
+)
+
+# Stream ciphers
+add_library(_ARC4
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/ARC4.c
+)
+
+add_library(_Salsa20
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/Salsa20.c
+)
+
+add_library(_chacha20
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/chacha20.c
+)
+
+# Others
+add_library(_scrypt
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/scrypt.c
+)
+
+# Utility modules
+add_library(_strxor
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/strxor.c
+)
+
+set(CRYPTO_HASH
+  _MD2
+  _MD4
+  _SHA256
+  _SHA224
+  _SHA384
+  _SHA512
+  _RIPEMD160
+  _keccak
+  _BLAKE2b
+  _BLAKE2s
+)
+set(CRYPTO_CIPHER
+  _raw_aes
+  _raw_aesni
+  _raw_arc2
+  _raw_blowfish
+  _raw_cast
+  _raw_des
+  _raw_des3
+  _raw_ecb
+  _raw_cbc
+  _raw_cfb
+  _raw_ofb
+  _raw_ctr
+  _raw_ocb
+  _ARC4
+  _Salsa20
+  _chacha20
+)
+set(CRYPTO_UTIL _strxor _cpuid _galois)
+set(CRYPTO_PROTOCOL _scrypt)
+
+foreach(CRYPTO_LIB IN LISTS CRYPTO_HASH CRYPTO_CIPHER CRYPTO_UTIL CRYPTO_PROTOCOL)
+  target_compile_definitions(${CRYPTO_LIB}
+    PRIVATE
+    ARGTYPE=3
+  )
+
+  if (HAVE_INTRIN_H)
+    target_compile_definitions(${CRYPTO_LIB}
+      PRIVATE
+      HAVE_INTRIN_H
+    ) 
+  endif()
+
+  if (HAVE_CPUID_H)
+    target_compile_definitions(${CRYPTO_LIB}
+      PRIVATE
+      HAVE_CPUID_H
+    ) 
+  endif()
+
+  target_link_libraries(${CRYPTO_LIB}
+    PRIVATE
+    ${PYTHON_LIBRARIES}
+    tomcrypt
+  )
+
+  target_include_directories(${CRYPTO_LIB}
+    PRIVATE
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src;${PYTHON_INCLUDE_DIRS}>
+  )
+
+  set_target_properties(${CRYPTO_LIB} PROPERTIES SUFFIX ".pyd")
+
+  if(${CRYPTO_LIB} IN_LIST CRYPTO_HASH)
+    set(CRYPTO_INSTALL bin/Python/Lib/site-packages/${NAMESPACE}/Hash/)
+  elseif(${CRYPTO_LIB} IN_LIST CRYPTO_CIPHER)
+    set(CRYPTO_INSTALL bin/Python/Lib/site-packages/${NAMESPACE}/Cipher/)
+  elseif(${CRYPTO_LIB} IN_LIST CRYPTO_UTIL)
+    set(CRYPTO_INSTALL bin/Python/Lib/site-packages/${NAMESPACE}/Util/)
+  else()
+    set(CRYPTO_INSTALL bin/Python/Lib/site-packages/${NAMESPACE}/Protocol/)
+  endif()
+  
+  install(TARGETS ${CRYPTO_LIB}
+    RUNTIME DESTINATION ${CRYPTO_INSTALL}
+  )
+  if(MSVC AND BUILD_SHARED_LIBS)
+  install(FILES
+    $<TARGET_PDB_FILE:${CRYPTO_LIB}>
+    DESTINATION lib
+  )
+endif()
+endforeach() 
+
+install(DIRECTORY
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/Crypto/
+  DESTINATION bin/Python/Lib/site-packages/${NAMESPACE}
+  PATTERN SelfTest EXCLUDE
+)
+
+if(SEPARATE_NAMESPACE)
+  install(CODE "file(GLOB_RECURSE PYMODULES ${CMAKE_INSTALL_PREFIX}/bin/Python/Lib/site-packages/${NAMESPACE}/*.py)")
+  install(CODE "foreach(PYMODULE \${PYMODULES})
+    file(READ \${PYMODULE} content)
+    string(REPLACE \"Crypto.\" \"Cryptodome.\" content \"\${content}\")
+    string(REPLACE \"Crypto \" \"Cryptodome \" content \"\${content}\")
+    string(REPLACE \"'Crypto'\" \"'Cryptodome'\" content \"\${content}\")
+    string(REPLACE \"\\\"Crypto\\\"\" \"\\\"Cryptodome\\\"\" content \"\${content}\")
+    file(WRITE \${PYMODULE} \"\${content}\")
+  endforeach()")
+endif()
--- /dev/null
+++ b/cmake/pycryptodome-config.cmake
@@ -0,0 +1 @@
+include(${CMAKE_CURRENT_LIST_DIR}/pycryptodome.cmake)
--- a/src/cast5.c
+++ b/src/cast5.c
@@ -4,7 +4,7 @@
 
 #include "pycrypto_common.h"
 
-static const uint32 S1[256] = {
+static const uint32_t S1[256] = {
 0x30fb40d4, 0x9fa0ff0b, 0x6beccd2f, 0x3f258c7a, 0x1e213f2f,
 0x9c004dd3, 0x6003e540, 0xcf9fc949, 0xbfd4af27, 0x88bbbdb5,
 0xe2034090, 0x98d09675, 0x6e63a0e0, 0x15c361d2, 0xc2e7661d,
@@ -58,7 +58,7 @@
 0xa2f7c579, 0x429ef47d, 0x427b169c, 0x5ac9f049, 0xdd8f0f00,
 0x5c8165bf };
 
-static const uint32 S2[256] = {
+static const uint32_t S2[256] = {
 0x1f201094, 0xef0ba75b, 0x69e3cf7e, 0x393f4380, 0xfe61cf7a,
 0xeec5207a, 0x55889c94, 0x72fc0651, 0xada7ef79, 0x4e1d7235,
 0xd55a63ce, 0xde0436ba, 0x99c430ef, 0x5f0c0794, 0x18dcdb7d,
@@ -112,7 +112,7 @@
 0x06dfdf1e, 0x6c6cc4ef, 0x7160a539, 0x73bfbe70, 0x83877605,
 0x4523ecf1 };
 
-static const uint32 S3[256] = {
+static const uint32_t S3[256] = {
 0x8defc240, 0x25fa5d9f, 0xeb903dbf, 0xe810c907, 0x47607fff,
 0x369fe44b, 0x8c1fc644, 0xaececa90, 0xbeb1f9bf, 0xeefbcaea,
 0xe8cf1950, 0x51df07ae, 0x920e8806, 0xf0ad0548, 0xe13c8d83,
@@ -166,7 +166,7 @@
 0xa4315c11, 0x83323ec5, 0xdfef4636, 0xa133c501, 0xe9d3531c,
 0xee353783 };
 
-static const uint32 S4[256] = {
+static const uint32_t S4[256] = {
 0x9db30420, 0x1fb6e9de, 0xa7be7bef, 0xd273a298, 0x4a4f7bdb,
 0x64ad8c57, 0x85510443, 0xfa020ed1, 0x7e287aff, 0xe60fb663,
 0x095f35a1, 0x79ebf120, 0xfd059d43, 0x6497b7b1, 0xf3641f63,
@@ -220,7 +220,7 @@
 0x851e20fe, 0x9833557e, 0x13ecf0b0, 0xd3ffb372, 0x3f85c5c1,
 0x0aef7ed2 };
 
-static const uint32 S5[256] = {
+static const uint32_t S5[256] = {
 0x7ec90c04, 0x2c6e74b9, 0x9b0e66df, 0xa6337911, 0xb86a7fff,
 0x1dd358f5, 0x44dd9d44, 0x1731167f, 0x08fbf1fa, 0xe7f511cc,
 0xd2051b00, 0x735aba00, 0x2ab722d8, 0x386381cb, 0xacf6243a,
@@ -274,7 +274,7 @@
 0x750e6249, 0xda627e55, 0x5e76ffa8, 0xb1534546, 0x6d47de08,
 0xefe9e7d4 };
 
-static const uint32 S6[256] = {
+static const uint32_t S6[256] = {
 0xf6fa8f9d, 0x2cac6ce1, 0x4ca34867, 0xe2337f7c, 0x95db08e7,
 0x016843b4, 0xeced5cbc, 0x325553ac, 0xbf9f0960, 0xdfa1e2ed,
 0x83f0579d, 0x63ed86b9, 0x1ab6a6b8, 0xde5ebe39, 0xf38ff732,
@@ -328,7 +328,7 @@
 0x38b5f331, 0x7128a454, 0x48392905, 0xa65b1db8, 0x851c97bd,
 0xd675cf2f };
 
-static const uint32 S7[256] = {
+static const uint32_t S7[256] = {
 0x85e04019, 0x332bf567, 0x662dbfff, 0xcfc65693, 0x2a8d7f6f,
 0xab9bc912, 0xde6008a1, 0x2028da1f, 0x0227bce7, 0x4d642916,
 0x18fac300, 0x50f18b82, 0x2cb2cb11, 0xb232e75c, 0x4b3695f2,
@@ -382,7 +382,7 @@
 0x0fedce83, 0x878ddada, 0xf2a279c7, 0x94e01be8, 0x90716f4b,
 0x954b8aa3 };
 
-static const uint32 S8[256] = {
+static const uint32_t S8[256] = {
 0xe216300d, 0xbbddfffc, 0xa7ebdabd, 0x35648095, 0x7789f8b7,
 0xe6c1121b, 0x0e241600, 0x052ce8b5, 0x11a9cfb0, 0xe5952f11,
 0xece7990a, 0x9386d174, 0x2a42931c, 0x76e38111, 0xb12def3a,
