--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,257 @@
+cmake_minimum_required(VERSION 3.3)
+
+project(pycryptodome VERSION 3.4.6 LANGUAGES C)
+
+if(MSVC)
+  set(CMAKE_DEBUG_POSTFIX "d")
+endif()
+
+find_package(python REQUIRED NO_MODULE)
+
+include(CheckIncludeFile)
+
+CHECK_INCLUDE_FILE(intrin.h HAVE_INTRIN_H)
+CHECK_INCLUDE_FILE(cpuid.h HAVE_CPUID_H)
+  
+add_library(tomcrypt STATIC
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_hash.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_mac.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_macros.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_math.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_misc.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_pk.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_pkcs.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_prng.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_argchk.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_cfg.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_cipher.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_custom.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtom/tomcrypt_des.c
+)
+
+target_include_directories(tomcrypt
+  PRIVATE
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/libtom>
+  PUBLIC
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/libtom>
+)
+
+# Hash functions
+add_library(_MD2
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/MD2.c
+)
+
+add_library(_MD4
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/MD4.c
+)
+
+add_library(_SHA256
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/SHA256.c
+)
+
+add_library(_SHA224
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/SHA224.c
+)
+
+add_library(_SHA384
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/SHA384.c
+)
+
+add_library(_SHA512
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/SHA512.c
+)
+
+add_library(_RIPEMD160
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/RIPEMD160.c
+)
+
+add_library(_keccak
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/keccak.c
+)
+
+add_library(_BLAKE2b
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/blake2b.c
+)
+
+add_library(_BLAKE2s
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/blake2s.c
+)
+
+# Block encryption algorithms
+add_library(_raw_aes
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/AES.c
+)
+
+add_library(_raw_aesni
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/AESNI.c
+)
+
+add_library(_raw_arc2
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/ARC2.c
+)
+
+add_library(_raw_blowfish
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/Blowfish.c
+)
+
+add_library(_raw_cast
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/CAST.c
+)
+
+add_library(_raw_des
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/DES.c
+)
+
+add_library(_raw_des3
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/DES3.c
+)
+
+add_library(_galois
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/galois.c
+)
+
+add_library(_cpuid
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/cpuid.c
+)
+
+# Chaining modes
+add_library(_raw_ecb
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/raw_ecb.c
+)
+
+add_library(_raw_cbc
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/raw_cbc.c
+)
+
+add_library(_raw_cfb
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/raw_cfb.c
+)
+
+add_library(_raw_ofb
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/raw_ofb.c
+)
+
+add_library(_raw_ctr
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/raw_ctr.c
+)
+
+add_library(_raw_ocb
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/raw_ocb.c
+)
+
+# Stream ciphers
+add_library(_ARC4
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/ARC4.c
+)
+
+add_library(_Salsa20
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/Salsa20.c
+)
+
+add_library(_chacha20
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/chacha20.c
+)
+
+# Others
+add_library(_scrypt
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/scrypt.c
+)
+
+# Utility modules
+add_library(_strxor
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/strxor.c
+)
+
+set(CRYPTO_HASH
+  _MD2
+  _MD4
+  _SHA256
+  _SHA224
+  _SHA384
+  _SHA512
+  _RIPEMD160
+  _keccak
+  _BLAKE2b
+  _BLAKE2s
+)
+set(CRYPTO_CIPHER
+  _raw_aes
+  _raw_aesni
+  _raw_arc2
+  _raw_blowfish
+  _raw_cast
+  _raw_des
+  _raw_des3
+  _raw_ecb
+  _raw_cbc
+  _raw_cfb
+  _raw_ofb
+  _raw_ctr
+  _raw_ocb
+  _ARC4
+  _Salsa20
+  _chacha20
+)
+set(CRYPTO_UTIL _strxor _cpuid _galois)
+set(CRYPTO_PROTOCOL _scrypt)
+
+foreach(CRYPTO_LIB IN LISTS CRYPTO_HASH CRYPTO_CIPHER CRYPTO_UTIL CRYPTO_PROTOCOL)
+  target_compile_definitions(${CRYPTO_LIB}
+    PRIVATE
+    ARGTYPE=3
+  )
+
+  if (HAVE_INTRIN_H)
+    target_compile_definitions(${CRYPTO_LIB}
+      PRIVATE
+      HAVE_INTRIN_H
+    ) 
+  endif()
+
+  if (HAVE_CPUID_H)
+    target_compile_definitions(${CRYPTO_LIB}
+      PRIVATE
+      HAVE_CPUID_H
+    ) 
+  endif()
+
+  target_link_libraries(${CRYPTO_LIB}
+    PRIVATE
+    ${PYTHON_LIBRARIES}
+    tomcrypt
+  )
+
+  target_include_directories(${CRYPTO_LIB}
+    PRIVATE
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src;${PYTHON_INCLUDE_DIRS}>
+  )
+
+  set_target_properties(${CRYPTO_LIB} PROPERTIES SUFFIX ".pyd")
+
+  if(${CRYPTO_LIB} IN_LIST CRYPTO_HASH)
+    set(CRYPTO_INSTALL bin/Python/Lib/site-packages/Cryptodome/Hash/)
+  elseif(${CRYPTO_LIB} IN_LIST CRYPTO_CIPHER)
+    set(CRYPTO_INSTALL bin/Python/Lib/site-packages/Cryptodome/Cipher/)
+  elseif(${CRYPTO_LIB} IN_LIST CRYPTO_UTIL)
+    set(CRYPTO_INSTALL bin/Python/Lib/site-packages/Cryptodome/Util/)
+  else()
+    set(CRYPTO_INSTALL bin/Python/Lib/site-packages/Cryptodome/Protocol/)
+  endif()
+  
+  install(TARGETS ${CRYPTO_LIB}
+    RUNTIME DESTINATION ${CRYPTO_INSTALL}
+  )
+  if(MSVC AND BUILD_SHARED_LIBS)
+  install(FILES
+    $<TARGET_PDB_FILE:${CRYPTO_LIB}>
+    DESTINATION lib
+  )
+endif()
+endforeach() 
+
+install(DIRECTORY
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/Crypto/
+  DESTINATION bin/Python/Lib/site-packages/Cryptodome
+  PATTERN SelfTest EXCLUDE
+)
--- /dev/null
+++ b/cmake/pycryptodome-config.cmake
@@ -0,0 +1 @@
+include(${CMAKE_CURRENT_LIST_DIR}/pycryptodome.cmake)
--- a/lib/Crypto/Cipher/AES.py
+++ b/lib/Crypto/Cipher/AES.py
@@ -79,13 +79,13 @@
 
 import sys
 
-from Crypto.Cipher import _create_cipher
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib,
+from Cryptodome.Cipher import _create_cipher
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib,
                                   VoidPointer, SmartPointer,
                                   c_size_t, expect_byte_string)
 
 
-_raw_cpuid_lib = load_pycryptodome_raw_lib("Crypto.Util._cpuid",
+_raw_cpuid_lib = load_pycryptodome_raw_lib("Cryptodome.Util._cpuid",
                                            "int have_aes_ni(void);")
 
 _cproto = """
@@ -104,13 +104,13 @@
         """
 
 
-_raw_aes_lib = load_pycryptodome_raw_lib("Crypto.Cipher._raw_aes",
+_raw_aes_lib = load_pycryptodome_raw_lib("Cryptodome.Cipher._raw_aes",
                                          _cproto)
 
 _raw_aesni_lib = None
 try:
     if _raw_cpuid_lib.have_aes_ni() == 1:
-        _raw_aesni_lib = load_pycryptodome_raw_lib("Crypto.Cipher._raw_aesni",
+        _raw_aesni_lib = load_pycryptodome_raw_lib("Cryptodome.Cipher._raw_aesni",
                                                    _cproto.replace("AES",
                                                                   "AESNI"))
 except OSError:
--- a/lib/Crypto/Cipher/ARC2.py
+++ b/lib/Crypto/Cipher/ARC2.py
@@ -56,9 +56,9 @@
 
 import sys
 
-from Crypto.Cipher import _create_cipher
-from Crypto.Util.py3compat import byte_string
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib,
+from Cryptodome.Cipher import _create_cipher
+from Cryptodome.Util.py3compat import byte_string
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib,
                                   VoidPointer, SmartPointer,
                                   c_size_t, expect_byte_string)
 
--- a/lib/Crypto/Cipher/ARC4.py
+++ b/lib/Crypto/Cipher/ARC4.py
@@ -60,14 +60,14 @@
 :undocumented: __package__
 """
 
-from Crypto.Util.py3compat import b
+from Cryptodome.Util.py3compat import b
 
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib, VoidPointer,
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib, VoidPointer,
                                   create_string_buffer, get_raw_buffer,
                                   SmartPointer, c_size_t, expect_byte_string)
 
 
-_raw_arc4_lib = load_pycryptodome_raw_lib("Crypto.Cipher._ARC4", """
+_raw_arc4_lib = load_pycryptodome_raw_lib("Cryptodome.Cipher._ARC4", """
                     int ARC4_stream_encrypt(void *rc4State, const uint8_t in[],
                                             uint8_t out[], size_t len);
                     int ARC4_stream_init(uint8_t *key, size_t keylen,
--- a/lib/Crypto/Cipher/Blowfish.py
+++ b/lib/Crypto/Cipher/Blowfish.py
@@ -52,8 +52,8 @@
 
 import sys
 
-from Crypto.Cipher import _create_cipher
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib,
+from Cryptodome.Cipher import _create_cipher
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib,
                                   VoidPointer, SmartPointer, c_size_t,
                                   expect_byte_string)
 
--- a/lib/Crypto/Cipher/CAST.py
+++ b/lib/Crypto/Cipher/CAST.py
@@ -55,9 +55,9 @@
 
 import sys
 
-from Crypto.Cipher import _create_cipher
-from Crypto.Util.py3compat import byte_string
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib,
+from Cryptodome.Cipher import _create_cipher
+from Cryptodome.Util.py3compat import byte_string
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib,
                                   VoidPointer, SmartPointer,
                                   c_size_t, expect_byte_string)
 
--- a/lib/Crypto/Cipher/ChaCha20.py
+++ b/lib/Crypto/Cipher/ChaCha20.py
@@ -47,15 +47,15 @@
 .. _ChaCha20: http://http://cr.yp.to/chacha.html
 """
 
-from Crypto.Random import get_random_bytes
+from Cryptodome.Random import get_random_bytes
 
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib,
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib,
                                   create_string_buffer,
                                   get_raw_buffer, VoidPointer,
                                   SmartPointer, c_size_t,
                                   expect_byte_string, c_ulong)
 
-_raw_chacha20_lib = load_pycryptodome_raw_lib("Crypto.Cipher._chacha20",
+_raw_chacha20_lib = load_pycryptodome_raw_lib("Cryptodome.Cipher._chacha20",
                     """
                     int chacha20_init(void **pState,
                                       const uint8_t *key,
--- a/lib/Crypto/Cipher/DES.py
+++ b/lib/Crypto/Cipher/DES.py
@@ -49,9 +49,9 @@
 
 import sys
 
-from Crypto.Cipher import _create_cipher
-from Crypto.Util.py3compat import byte_string
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib,
+from Cryptodome.Cipher import _create_cipher
+from Cryptodome.Util.py3compat import byte_string
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib,
                                   VoidPointer, SmartPointer,
                                   c_size_t, expect_byte_string)
 
--- a/lib/Crypto/Cipher/DES3.py
+++ b/lib/Crypto/Cipher/DES3.py
@@ -69,9 +69,9 @@
 
 import sys
 
-from Crypto.Cipher import _create_cipher
-from Crypto.Util.py3compat import byte_string, b, bchr, bord
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib,
+from Cryptodome.Cipher import _create_cipher
+from Cryptodome.Util.py3compat import byte_string, b, bchr, bord
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib,
                                   VoidPointer, SmartPointer,
                                   c_size_t, expect_byte_string)
 
--- a/lib/Crypto/Cipher/PKCS1_OAEP.py
+++ b/lib/Crypto/Cipher/PKCS1_OAEP.py
@@ -49,14 +49,14 @@
 
 __all__ = [ 'new', 'PKCS1OAEP_Cipher' ]
 
-from Crypto.Signature.pss import MGF1
-import Crypto.Hash.SHA1
+from Cryptodome.Signature.pss import MGF1
+import Cryptodome.Hash.SHA1
 
-from Crypto.Util.py3compat import *
-import Crypto.Util.number
-from   Crypto.Util.number import ceil_div, bytes_to_long, long_to_bytes
-from   Crypto.Util.strxor import strxor
-from Crypto import Random
+from Cryptodome.Util.py3compat import *
+import Cryptodome.Util.number
+from   Cryptodome.Util.number import ceil_div, bytes_to_long, long_to_bytes
+from   Cryptodome.Util.strxor import strxor
+from Cryptodome import Random
 
 class PKCS1OAEP_Cipher:
     """This cipher can perform PKCS#1 v1.5 OAEP encryption or decryption."""
@@ -91,7 +91,7 @@
         if hashAlgo:
             self._hashObj = hashAlgo
         else:
-            self._hashObj = Crypto.Hash.SHA1
+            self._hashObj = Cryptodome.Hash.SHA1
 
         if mgfunc:
             self._mgf = mgfunc
@@ -130,7 +130,7 @@
         # TODO: Verify the key is RSA
 
         # See 7.1.1 in RFC3447
-        modBits = Crypto.Util.number.size(self._key.n)
+        modBits = Cryptodome.Util.number.size(self._key.n)
         k = ceil_div(modBits,8) # Convert from bits to bytes
         hLen = self._hashObj.digest_size
         mLen = len(message)
@@ -184,7 +184,7 @@
         """
 
         # See 7.1.2 in RFC3447
-        modBits = Crypto.Util.number.size(self._key.n)
+        modBits = Cryptodome.Util.number.size(self._key.n)
         k = ceil_div(modBits,8) # Convert from bits to bytes
         hLen = self._hashObj.digest_size
 
--- a/lib/Crypto/Cipher/PKCS1_v1_5.py
+++ b/lib/Crypto/Cipher/PKCS1_v1_5.py
@@ -69,10 +69,10 @@
 
 __all__ = [ 'new', 'PKCS115_Cipher' ]
 
-from Crypto.Util.number import ceil_div, bytes_to_long, long_to_bytes
-from Crypto.Util.py3compat import *
-import Crypto.Util.number
-from Crypto import Random
+from Cryptodome.Util.number import ceil_div, bytes_to_long, long_to_bytes
+from Cryptodome.Util.py3compat import *
+import Cryptodome.Util.number
+from Cryptodome import Random
 
 class PKCS115_Cipher:
     """This cipher can perform PKCS#1 v1.5 RSA encryption or decryption."""
--- a/lib/Crypto/Cipher/Salsa20.py
+++ b/lib/Crypto/Cipher/Salsa20.py
@@ -41,15 +41,15 @@
 :undocumented: __package__
 """
 
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib,
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib,
                                   create_string_buffer,
                                   get_raw_buffer, VoidPointer,
                                   SmartPointer, c_size_t,
                                   expect_byte_string)
 
-from Crypto.Random import get_random_bytes
+from Cryptodome.Random import get_random_bytes
 
-_raw_salsa20_lib = load_pycryptodome_raw_lib("Crypto.Cipher._Salsa20",
+_raw_salsa20_lib = load_pycryptodome_raw_lib("Cryptodome.Cipher._Salsa20",
                     """
                     int Salsa20_stream_init(uint8_t *key, size_t keylen,
                                             uint8_t *nonce, size_t nonce_len,
--- a/lib/Crypto/Cipher/__init__.py
+++ b/lib/Crypto/Cipher/__init__.py
@@ -39,17 +39,17 @@
 ========================    =======   ========================
 Module name                 Type      Description
 ========================    =======   ========================
-`Crypto.Cipher.AES`         Block     Advanced Encryption Standard
-`Crypto.Cipher.ARC2`        Block     Alleged RC2
-`Crypto.Cipher.ARC4`        Stream    Alleged RC4
-`Crypto.Cipher.Blowfish`    Block     Blowfish
-`Crypto.Cipher.CAST`        Block     CAST
-`Crypto.Cipher.DES`         Block     The Data Encryption Standard.
+`Cryptodome.Cipher.AES`         Block     Advanced Encryption Standard
+`Cryptodome.Cipher.ARC2`        Block     Alleged RC2
+`Cryptodome.Cipher.ARC4`        Stream    Alleged RC4
+`Cryptodome.Cipher.Blowfish`    Block     Blowfish
+`Cryptodome.Cipher.CAST`        Block     CAST
+`Cryptodome.Cipher.DES`         Block     The Data Encryption Standard.
                                       Very commonly used in the past,
                                       but today its 56-bit keys are too small.
-`Crypto.Cipher.DES3`        Block     Triple DES
-`Crypto.Cipher.Salsa20`     Stream    Salsa20
-`Crypto.Cipher.ChaCha20`    Stream    ChaCha20
+`Cryptodome.Cipher.DES3`        Block     Triple DES
+`Cryptodome.Cipher.Salsa20`     Stream    Salsa20
+`Cryptodome.Cipher.ChaCha20`    Stream    ChaCha20
 ========================    =======   ========================
 
 
@@ -65,8 +65,8 @@
 ==========================    =======================
 Module name                   Description
 ==========================    =======================
-`Crypto.Cipher.PKCS1_v1_5`    PKCS#1 v1.5 encryption, based on RSA key pairs
-`Crypto.Cipher.PKCS1_OAEP`    PKCS#1 OAEP encryption, based on RSA key pairs
+`Cryptodome.Cipher.PKCS1_v1_5`    PKCS#1 v1.5 encryption, based on RSA key pairs
+`Cryptodome.Cipher.PKCS1_OAEP`    PKCS#1 OAEP encryption, based on RSA key pairs
 ==========================    =======================
 
 :undocumented:  __package__, _AES, _ARC2, _ARC4, _Blowfish
@@ -75,17 +75,17 @@
 
 import os
 
-from Crypto.Cipher._mode_ecb import _create_ecb_cipher
-from Crypto.Cipher._mode_cbc import _create_cbc_cipher
-from Crypto.Cipher._mode_cfb import _create_cfb_cipher
-from Crypto.Cipher._mode_ofb import _create_ofb_cipher
-from Crypto.Cipher._mode_ctr import _create_ctr_cipher
-from Crypto.Cipher._mode_openpgp import _create_openpgp_cipher
-from Crypto.Cipher._mode_ccm import _create_ccm_cipher
-from Crypto.Cipher._mode_eax import _create_eax_cipher
-from Crypto.Cipher._mode_siv import _create_siv_cipher
-from Crypto.Cipher._mode_gcm import _create_gcm_cipher
-from Crypto.Cipher._mode_ocb import _create_ocb_cipher
+from Cryptodome.Cipher._mode_ecb import _create_ecb_cipher
+from Cryptodome.Cipher._mode_cbc import _create_cbc_cipher
+from Cryptodome.Cipher._mode_cfb import _create_cfb_cipher
+from Cryptodome.Cipher._mode_ofb import _create_ofb_cipher
+from Cryptodome.Cipher._mode_ctr import _create_ctr_cipher
+from Cryptodome.Cipher._mode_openpgp import _create_openpgp_cipher
+from Cryptodome.Cipher._mode_ccm import _create_ccm_cipher
+from Cryptodome.Cipher._mode_eax import _create_eax_cipher
+from Cryptodome.Cipher._mode_siv import _create_siv_cipher
+from Cryptodome.Cipher._mode_gcm import _create_gcm_cipher
+from Cryptodome.Cipher._mode_ocb import _create_ocb_cipher
 
 _modes = { 1:_create_ecb_cipher,
            2:_create_cbc_cipher,
--- a/lib/Crypto/Cipher/_mode_cbc.py
+++ b/lib/Crypto/Cipher/_mode_cbc.py
@@ -34,13 +34,13 @@
 
 __all__ = ['CbcMode']
 
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib, VoidPointer,
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib, VoidPointer,
                                   create_string_buffer, get_raw_buffer,
                                   SmartPointer, c_size_t, expect_byte_string)
 
-from Crypto.Random import get_random_bytes
+from Cryptodome.Random import get_random_bytes
 
-raw_cbc_lib = load_pycryptodome_raw_lib("Crypto.Cipher._raw_cbc", """
+raw_cbc_lib = load_pycryptodome_raw_lib("Cryptodome.Cipher._raw_cbc", """
                 int CBC_start_operation(void *cipher,
                                         const uint8_t iv[],
                                         size_t iv_len,
--- a/lib/Crypto/Cipher/_mode_ccm.py
+++ b/lib/Crypto/Cipher/_mode_ccm.py
@@ -34,13 +34,13 @@
 
 __all__ = ['CcmMode']
 
-from Crypto.Util.py3compat import byte_string, b, bchr, bord, unhexlify
+from Cryptodome.Util.py3compat import byte_string, b, bchr, bord, unhexlify
 
-from Crypto.Util.strxor import strxor
-from Crypto.Util.number import long_to_bytes
+from Cryptodome.Util.strxor import strxor
+from Cryptodome.Util.number import long_to_bytes
 
-from Crypto.Hash import BLAKE2s
-from Crypto.Random import get_random_bytes
+from Cryptodome.Hash import BLAKE2s
+from Cryptodome.Random import get_random_bytes
 
 
 def enum(**enums):
--- a/lib/Crypto/Cipher/_mode_cfb.py
+++ b/lib/Crypto/Cipher/_mode_cfb.py
@@ -26,13 +26,13 @@
 
 __all__ = ['CfbMode']
 
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib, VoidPointer,
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib, VoidPointer,
                                   create_string_buffer, get_raw_buffer,
                                   SmartPointer, c_size_t, expect_byte_string)
 
-from Crypto.Random import get_random_bytes
+from Cryptodome.Random import get_random_bytes
 
-raw_cfb_lib = load_pycryptodome_raw_lib("Crypto.Cipher._raw_cfb","""
+raw_cfb_lib = load_pycryptodome_raw_lib("Cryptodome.Cipher._raw_cfb","""
                     int CFB_start_operation(void *cipher,
                                             const uint8_t iv[],
                                             size_t iv_len,
--- a/lib/Crypto/Cipher/_mode_ctr.py
+++ b/lib/Crypto/Cipher/_mode_ctr.py
@@ -26,15 +26,15 @@
 
 __all__ = ['CtrMode']
 
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib, VoidPointer,
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib, VoidPointer,
                                   create_string_buffer, get_raw_buffer,
                                   SmartPointer, c_size_t, expect_byte_string)
 
-from Crypto.Random import get_random_bytes
-from Crypto.Util.py3compat import b, bchr
-from Crypto.Util.number import long_to_bytes
+from Cryptodome.Random import get_random_bytes
+from Cryptodome.Util.py3compat import b, bchr
+from Cryptodome.Util.number import long_to_bytes
 
-raw_ctr_lib = load_pycryptodome_raw_lib("Crypto.Cipher._raw_ctr", """
+raw_ctr_lib = load_pycryptodome_raw_lib("Cryptodome.Cipher._raw_ctr", """
                     int CTR_start_operation(void *cipher,
                                             uint8_t   initialCounterBlock[],
                                             size_t    initialCounterBlock_len,
@@ -325,7 +325,7 @@
         little_endian = _counter.pop("little_endian")
     except KeyError:
         raise TypeError("Incorrect counter object"
-                        " (use Crypto.Util.Counter.new)")
+                        " (use Cryptodome.Util.Counter.new)")
 
     # Compute initial counter block
     words = []
--- a/lib/Crypto/Cipher/_mode_eax.py
+++ b/lib/Crypto/Cipher/_mode_eax.py
@@ -34,13 +34,13 @@
 
 __all__ = ['EaxMode']
 
-from Crypto.Util.py3compat import byte_string, bchr, bord, unhexlify, b
+from Cryptodome.Util.py3compat import byte_string, bchr, bord, unhexlify, b
 
-from Crypto.Util.strxor import strxor
-from Crypto.Util.number import long_to_bytes, bytes_to_long
+from Cryptodome.Util.strxor import strxor
+from Cryptodome.Util.number import long_to_bytes, bytes_to_long
 
-from Crypto.Hash import CMAC, BLAKE2s
-from Crypto.Random import get_random_bytes
+from Cryptodome.Hash import CMAC, BLAKE2s
+from Cryptodome.Random import get_random_bytes
 
 
 class EaxMode(object):
--- a/lib/Crypto/Cipher/_mode_ecb.py
+++ b/lib/Crypto/Cipher/_mode_ecb.py
@@ -26,12 +26,12 @@
 
 __all__ = [ 'EcbMode' ]
 
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib,
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib,
                                   VoidPointer, create_string_buffer,
                                   get_raw_buffer, SmartPointer,
                                   c_size_t, expect_byte_string)
 
-raw_ecb_lib = load_pycryptodome_raw_lib("Crypto.Cipher._raw_ecb", """
+raw_ecb_lib = load_pycryptodome_raw_lib("Cryptodome.Cipher._raw_ecb", """
                     int ECB_start_operation(void *cipher,
                                             void **pResult);
                     int ECB_encrypt(void *ecbState,
--- a/lib/Crypto/Cipher/_mode_gcm.py
+++ b/lib/Crypto/Cipher/_mode_gcm.py
@@ -34,17 +34,17 @@
 
 __all__ = ['GcmMode']
 
-from Crypto.Util.py3compat import b, bchr, byte_string, bord, unhexlify
+from Cryptodome.Util.py3compat import b, bchr, byte_string, bord, unhexlify
 
-from Crypto.Util.number import long_to_bytes, bytes_to_long
-from Crypto.Hash import BLAKE2s
-from Crypto.Random import get_random_bytes
+from Cryptodome.Util.number import long_to_bytes, bytes_to_long
+from Cryptodome.Hash import BLAKE2s
+from Cryptodome.Random import get_random_bytes
 
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib, VoidPointer,
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib, VoidPointer,
                                   create_string_buffer, get_raw_buffer,
                                   SmartPointer, c_size_t, expect_byte_string)
 
-_raw_galois_lib = load_pycryptodome_raw_lib("Crypto.Util._galois",
+_raw_galois_lib = load_pycryptodome_raw_lib("Cryptodome.Util._galois",
                     """
                     int ghash(  uint8_t y_out[16],
                                 const uint8_t block_data[],
--- a/lib/Crypto/Cipher/_mode_ocb.py
+++ b/lib/Crypto/Cipher/_mode_ocb.py
@@ -45,8 +45,8 @@
 meant for non-military purposes.
 
 Example:
-    >>> from Crypto.Cipher import AES
-    >>> from Crypto.Random import get_random_bytes
+    >>> from Cryptodome.Cipher import AES
+    >>> from Cryptodome.Random import get_random_bytes
     >>>
     >>> key = get_random_bytes(32)
     >>> cipher = AES.new(key, AES.MODE_OCB)
@@ -68,19 +68,19 @@
 .. _free licenses: http://web.cs.ucdavis.edu/~rogaway/ocb/license.htm
 """
 
-from Crypto.Util.py3compat import b, bord, bchr, unhexlify
-from Crypto.Util.number import long_to_bytes, bytes_to_long
-from Crypto.Util.strxor import strxor
+from Cryptodome.Util.py3compat import b, bord, bchr, unhexlify
+from Cryptodome.Util.number import long_to_bytes, bytes_to_long
+from Cryptodome.Util.strxor import strxor
 
-from Crypto.Hash import BLAKE2s
-from Crypto.Random import get_random_bytes
+from Cryptodome.Hash import BLAKE2s
+from Cryptodome.Random import get_random_bytes
 
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib, VoidPointer,
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib, VoidPointer,
                                   create_string_buffer, get_raw_buffer,
                                   SmartPointer, c_size_t, expect_byte_string,
                                   )
 
-_raw_ocb_lib = load_pycryptodome_raw_lib("Crypto.Cipher._raw_ocb", """
+_raw_ocb_lib = load_pycryptodome_raw_lib("Cryptodome.Cipher._raw_ocb", """
                                     int OCB_start_operation(void *cipher,
                                         const uint8_t *offset_0,
                                         size_t offset_0_len,
--- a/lib/Crypto/Cipher/_mode_ofb.py
+++ b/lib/Crypto/Cipher/_mode_ofb.py
@@ -26,13 +26,13 @@
 
 __all__ = ['OfbMode']
 
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib, VoidPointer,
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib, VoidPointer,
                                   create_string_buffer, get_raw_buffer,
                                   SmartPointer, c_size_t, expect_byte_string)
 
-from Crypto.Random import get_random_bytes
+from Cryptodome.Random import get_random_bytes
 
-raw_ofb_lib = load_pycryptodome_raw_lib("Crypto.Cipher._raw_ofb", """
+raw_ofb_lib = load_pycryptodome_raw_lib("Cryptodome.Cipher._raw_ofb", """
                         int OFB_start_operation(void *cipher,
                                                 const uint8_t iv[],
                                                 size_t iv_len,
--- a/lib/Crypto/Cipher/_mode_openpgp.py
+++ b/lib/Crypto/Cipher/_mode_openpgp.py
@@ -34,8 +34,8 @@
 
 __all__ = ['OpenPgpMode']
 
-from Crypto.Util.py3compat import bchr
-from Crypto.Random import get_random_bytes
+from Cryptodome.Util.py3compat import bchr
+from Cryptodome.Random import get_random_bytes
 
 class OpenPgpMode(object):
     """OpenPGP mode.
--- a/lib/Crypto/Cipher/_mode_siv.py
+++ b/lib/Crypto/Cipher/_mode_siv.py
@@ -36,12 +36,12 @@
 
 from binascii import hexlify
 
-from Crypto.Util.py3compat import byte_string, bord, unhexlify, b
+from Cryptodome.Util.py3compat import byte_string, bord, unhexlify, b
 
-from Crypto.Util.number import long_to_bytes, bytes_to_long
-from Crypto.Protocol.KDF import _S2V
-from Crypto.Hash import BLAKE2s
-from Crypto.Random import get_random_bytes
+from Cryptodome.Util.number import long_to_bytes, bytes_to_long
+from Cryptodome.Protocol.KDF import _S2V
+from Cryptodome.Hash import BLAKE2s
+from Cryptodome.Random import get_random_bytes
 
 
 class SivMode(object):
--- a/lib/Crypto/Hash/BLAKE2b.py
+++ b/lib/Crypto/Hash/BLAKE2b.py
@@ -58,16 +58,16 @@
 
 from binascii import unhexlify
 
-from Crypto.Util.py3compat import b, bord, tobytes
+from Cryptodome.Util.py3compat import b, bord, tobytes
 
-from Crypto.Random import get_random_bytes
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib,
+from Cryptodome.Random import get_random_bytes
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib,
                                   VoidPointer, SmartPointer,
                                   create_string_buffer,
                                   get_raw_buffer, c_size_t,
                                   expect_byte_string)
 
-_raw_blake2b_lib = load_pycryptodome_raw_lib("Crypto.Hash._BLAKE2b",
+_raw_blake2b_lib = load_pycryptodome_raw_lib("Cryptodome.Hash._BLAKE2b",
                         """
                         int blake2b_init(void **state,
                                          const uint8_t *key,
--- a/lib/Crypto/Hash/BLAKE2s.py
+++ b/lib/Crypto/Hash/BLAKE2s.py
@@ -58,16 +58,16 @@
 
 from binascii import unhexlify
 
-from Crypto.Util.py3compat import b, bord, tobytes
+from Cryptodome.Util.py3compat import b, bord, tobytes
 
-from Crypto.Random import get_random_bytes
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib,
+from Cryptodome.Random import get_random_bytes
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib,
                                   VoidPointer, SmartPointer,
                                   create_string_buffer,
                                   get_raw_buffer, c_size_t,
                                   expect_byte_string)
 
-_raw_blake2s_lib = load_pycryptodome_raw_lib("Crypto.Hash._BLAKE2s",
+_raw_blake2s_lib = load_pycryptodome_raw_lib("Cryptodome.Hash._BLAKE2s",
                         """
                         int blake2s_init(void **state,
                                          const uint8_t *key,
--- a/lib/Crypto/Hash/CMAC.py
+++ b/lib/Crypto/Hash/CMAC.py
@@ -69,14 +69,14 @@
 .. _OMAC1: http://www.nuee.nagoya-u.ac.jp/labs/tiwata/omac/omac.html
 """
 
-from Crypto.Util.py3compat import b, bchr, bord, tobytes
+from Cryptodome.Util.py3compat import b, bchr, bord, tobytes
 
 from binascii import unhexlify
 
-from Crypto.Hash import BLAKE2s
-from Crypto.Util.strxor import strxor
-from Crypto.Util.number import long_to_bytes, bytes_to_long
-from Crypto.Random import get_random_bytes
+from Cryptodome.Hash import BLAKE2s
+from Cryptodome.Util.strxor import strxor
+from Cryptodome.Util.number import long_to_bytes, bytes_to_long
+from Cryptodome.Random import get_random_bytes
 
 #: The size of the authentication tag produced by the MAC.
 digest_size = None
--- a/lib/Crypto/Hash/HMAC.py
+++ b/lib/Crypto/Hash/HMAC.py
@@ -74,13 +74,13 @@
 
 __all__ = ['new', 'HMAC']
 
-from Crypto.Util.py3compat import b, bchr, bord, tobytes
+from Cryptodome.Util.py3compat import b, bchr, bord, tobytes
 
 from binascii import unhexlify
 
 import MD5, BLAKE2s
-from Crypto.Util.strxor import strxor
-from Crypto.Random import get_random_bytes
+from Cryptodome.Util.strxor import strxor
+from Cryptodome.Random import get_random_bytes
 
 
 class HMAC:
--- a/lib/Crypto/Hash/MD2.py
+++ b/lib/Crypto/Hash/MD2.py
@@ -45,16 +45,16 @@
 .. _RFC1319: http://tools.ietf.org/html/rfc1319
 """
 
-from Crypto.Util.py3compat import bord
+from Cryptodome.Util.py3compat import bord
 
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib,
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib,
                                   VoidPointer, SmartPointer,
                                   create_string_buffer,
                                   get_raw_buffer, c_size_t,
                                   expect_byte_string)
 
 _raw_md2_lib = load_pycryptodome_raw_lib(
-                        "Crypto.Hash._MD2",
+                        "Cryptodome.Hash._MD2",
                         """
                         int md2_init(void **shaState);
                         int md2_destroy(void *shaState);
--- a/lib/Crypto/Hash/MD4.py
+++ b/lib/Crypto/Hash/MD4.py
@@ -43,16 +43,16 @@
 .. _RFC1320: http://tools.ietf.org/html/rfc1320
 """
 
-from Crypto.Util.py3compat import bord
+from Cryptodome.Util.py3compat import bord
 
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib,
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib,
                                   VoidPointer, SmartPointer,
                                   create_string_buffer,
                                   get_raw_buffer, c_size_t,
                                   expect_byte_string)
 
 _raw_md4_lib = load_pycryptodome_raw_lib(
-                        "Crypto.Hash._MD4",
+                        "Cryptodome.Hash._MD4",
                         """
                         int md4_init(void **shaState);
                         int md4_destroy(void *shaState);
--- a/lib/Crypto/Hash/MD5.py
+++ b/lib/Crypto/Hash/MD5.py
@@ -37,7 +37,7 @@
 
 __all__ = ['new', 'block_size', 'digest_size']
 
-from Crypto.Util.py3compat import *
+from Cryptodome.Util.py3compat import *
 
 def __make_constructor():
     try:
--- a/lib/Crypto/Hash/RIPEMD.py
+++ b/lib/Crypto/Hash/RIPEMD.py
@@ -23,4 +23,4 @@
 
 """Deprecated alias for `Crypto.Hash.RIPEMD160`"""
 
-from Crypto.Hash.RIPEMD160 import new, block_size, digest_size
+from Cryptodome.Hash.RIPEMD160 import new, block_size, digest_size
--- a/lib/Crypto/Hash/RIPEMD160.py
+++ b/lib/Crypto/Hash/RIPEMD160.py
@@ -48,16 +48,16 @@
 .. _RIPEMD-160: http://homes.esat.kuleuven.be/~bosselae/ripemd160.html
 """
 
-from Crypto.Util.py3compat import bord
+from Cryptodome.Util.py3compat import bord
 
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib,
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib,
                                   VoidPointer, SmartPointer,
                                   create_string_buffer,
                                   get_raw_buffer, c_size_t,
                                   expect_byte_string)
 
 _raw_ripemd160_lib = load_pycryptodome_raw_lib(
-                        "Crypto.Hash._RIPEMD160",
+                        "Cryptodome.Hash._RIPEMD160",
                         """
                         int ripemd160_init(void **shaState);
                         int ripemd160_destroy(void *shaState);
--- a/lib/Crypto/Hash/SHA.py
+++ b/lib/Crypto/Hash/SHA.py
@@ -21,4 +21,4 @@
 # This file exists for backward compatibility with old code that refers to
 # Crypto.Hash.SHA
 
-from Crypto.Hash.SHA1 import __doc__, new, block_size, digest_size
+from Cryptodome.Hash.SHA1 import __doc__, new, block_size, digest_size
--- a/lib/Crypto/Hash/SHA1.py
+++ b/lib/Crypto/Hash/SHA1.py
@@ -37,7 +37,7 @@
 
 __all__ = ['new', 'block_size', 'digest_size']
 
-from Crypto.Util.py3compat import *
+from Cryptodome.Util.py3compat import *
 
 def __make_constructor():
     try:
--- a/lib/Crypto/Hash/SHA224.py
+++ b/lib/Crypto/Hash/SHA224.py
@@ -34,15 +34,15 @@
 .. _SHA-2: http://csrc.nist.gov/publications/fips/fips180-2/fips180-4.pdf
 """
 
-from Crypto.Util.py3compat import *
+from Cryptodome.Util.py3compat import *
 
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib,
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib,
                                   VoidPointer, SmartPointer,
                                   create_string_buffer,
                                   get_raw_buffer, c_size_t,
                                   expect_byte_string)
 
-_raw_sha224_lib = load_pycryptodome_raw_lib("Crypto.Hash._SHA224",
+_raw_sha224_lib = load_pycryptodome_raw_lib("Cryptodome.Hash._SHA224",
                         """
                         int SHA224_init(void **shaState);
                         int SHA224_destroy(void *shaState);
--- a/lib/Crypto/Hash/SHA256.py
+++ b/lib/Crypto/Hash/SHA256.py
@@ -34,15 +34,15 @@
 .. _SHA-2: http://csrc.nist.gov/publications/fips/fips180-2/fips180-4.pdf
 """
 
-from Crypto.Util.py3compat import *
+from Cryptodome.Util.py3compat import *
 
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib,
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib,
                                   VoidPointer, SmartPointer,
                                   create_string_buffer,
                                   get_raw_buffer, c_size_t,
                                   expect_byte_string)
 
-_raw_sha256_lib = load_pycryptodome_raw_lib("Crypto.Hash._SHA256",
+_raw_sha256_lib = load_pycryptodome_raw_lib("Cryptodome.Hash._SHA256",
                         """
                         int SHA256_init(void **shaState);
                         int SHA256_destroy(void *shaState);
--- a/lib/Crypto/Hash/SHA384.py
+++ b/lib/Crypto/Hash/SHA384.py
@@ -34,15 +34,15 @@
 .. _SHA-2: http://csrc.nist.gov/publications/fips/fips180-2/fips180-4.pdf
 """
 
-from Crypto.Util.py3compat import *
+from Cryptodome.Util.py3compat import *
 
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib,
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib,
                                   VoidPointer, SmartPointer,
                                   create_string_buffer,
                                   get_raw_buffer, c_size_t,
                                   expect_byte_string)
 
-_raw_sha384_lib = load_pycryptodome_raw_lib("Crypto.Hash._SHA384",
+_raw_sha384_lib = load_pycryptodome_raw_lib("Cryptodome.Hash._SHA384",
                         """
                         int SHA384_init(void **shaState);
                         int SHA384_destroy(void *shaState);
--- a/lib/Crypto/Hash/SHA3_224.py
+++ b/lib/Crypto/Hash/SHA3_224.py
@@ -34,15 +34,15 @@
 .. __: http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf
 """
 
-from Crypto.Util.py3compat import bord
+from Cryptodome.Util.py3compat import bord
 
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib,
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib,
                                   VoidPointer, SmartPointer,
                                   create_string_buffer,
                                   get_raw_buffer, c_size_t,
                                   expect_byte_string)
 
-from Crypto.Hash.keccak import _raw_keccak_lib
+from Cryptodome.Hash.keccak import _raw_keccak_lib
 
 class SHA3_224_Hash(object):
     """Class that implements a SHA-3/224 hash
--- a/lib/Crypto/Hash/SHA3_256.py
+++ b/lib/Crypto/Hash/SHA3_256.py
@@ -34,15 +34,15 @@
 .. __: http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf
 """
 
-from Crypto.Util.py3compat import bord
+from Cryptodome.Util.py3compat import bord
 
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib,
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib,
                                   VoidPointer, SmartPointer,
                                   create_string_buffer,
                                   get_raw_buffer, c_size_t,
                                   expect_byte_string)
 
-from Crypto.Hash.keccak import _raw_keccak_lib
+from Cryptodome.Hash.keccak import _raw_keccak_lib
 
 class SHA3_256_Hash(object):
     """Class that implements a SHA-3/256 hash
--- a/lib/Crypto/Hash/SHA3_384.py
+++ b/lib/Crypto/Hash/SHA3_384.py
@@ -34,15 +34,15 @@
 .. __: http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf
 """
 
-from Crypto.Util.py3compat import bord
+from Cryptodome.Util.py3compat import bord
 
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib,
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib,
                                   VoidPointer, SmartPointer,
                                   create_string_buffer,
                                   get_raw_buffer, c_size_t,
                                   expect_byte_string)
 
-from Crypto.Hash.keccak import _raw_keccak_lib
+from Cryptodome.Hash.keccak import _raw_keccak_lib
 
 class SHA3_384_Hash(object):
     """Class that implements a SHA-3/384 hash
--- a/lib/Crypto/Hash/SHA3_512.py
+++ b/lib/Crypto/Hash/SHA3_512.py
@@ -34,15 +34,15 @@
 .. __: http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf
 """
 
-from Crypto.Util.py3compat import bord
+from Cryptodome.Util.py3compat import bord
 
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib,
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib,
                                   VoidPointer, SmartPointer,
                                   create_string_buffer,
                                   get_raw_buffer, c_size_t,
                                   expect_byte_string)
 
-from Crypto.Hash.keccak import _raw_keccak_lib
+from Cryptodome.Hash.keccak import _raw_keccak_lib
 
 class SHA3_512_Hash(object):
     """Class that implements a SHA-3/512 hash
--- a/lib/Crypto/Hash/SHA512.py
+++ b/lib/Crypto/Hash/SHA512.py
@@ -34,15 +34,15 @@
 .. _SHA-2: http://csrc.nist.gov/publications/fips/fips180-2/fips180-4.pdf
 """
 
-from Crypto.Util.py3compat import *
+from Cryptodome.Util.py3compat import *
 
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib,
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib,
                                   VoidPointer, SmartPointer,
                                   create_string_buffer,
                                   get_raw_buffer, c_size_t,
                                   expect_byte_string)
 
-_raw_sha512_lib = load_pycryptodome_raw_lib("Crypto.Hash._SHA512",
+_raw_sha512_lib = load_pycryptodome_raw_lib("Cryptodome.Hash._SHA512",
                         """
                         int SHA512_init(void **shaState);
                         int SHA512_destroy(void *shaState);
--- a/lib/Crypto/Hash/SHAKE128.py
+++ b/lib/Crypto/Hash/SHAKE128.py
@@ -51,15 +51,15 @@
 .. _FIPS 202: http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf
 """
 
-from Crypto.Util.py3compat import bord
+from Cryptodome.Util.py3compat import bord
 
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib,
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib,
                                   VoidPointer, SmartPointer,
                                   create_string_buffer,
                                   get_raw_buffer, c_size_t,
                                   expect_byte_string)
 
-from Crypto.Hash.keccak import _raw_keccak_lib
+from Cryptodome.Hash.keccak import _raw_keccak_lib
 
 class SHAKE128_XOF(object):
     """Class that implements a SHAKE128 XOF
--- a/lib/Crypto/Hash/SHAKE256.py
+++ b/lib/Crypto/Hash/SHAKE256.py
@@ -51,15 +51,15 @@
 .. _FIPS 202: http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf
 """
 
-from Crypto.Util.py3compat import bord
+from Cryptodome.Util.py3compat import bord
 
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib,
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib,
                                   VoidPointer, SmartPointer,
                                   create_string_buffer,
                                   get_raw_buffer, c_size_t,
                                   expect_byte_string)
 
-from Crypto.Hash.keccak import _raw_keccak_lib
+from Cryptodome.Hash.keccak import _raw_keccak_lib
 
 class SHAKE256_XOF(object):
     """Class that implements a SHAKE256 XOF
--- a/lib/Crypto/Hash/keccak.py
+++ b/lib/Crypto/Hash/keccak.py
@@ -49,15 +49,15 @@
 .. _Keccak: http://www.keccak.noekeon.org/Keccak-specifications.pdf
 """
 
-from Crypto.Util.py3compat import bord
+from Cryptodome.Util.py3compat import bord
 
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib,
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib,
                                   VoidPointer, SmartPointer,
                                   create_string_buffer,
                                   get_raw_buffer, c_size_t,
                                   expect_byte_string)
 
-_raw_keccak_lib = load_pycryptodome_raw_lib("Crypto.Hash._keccak",
+_raw_keccak_lib = load_pycryptodome_raw_lib("Cryptodome.Hash._keccak",
                         """
                         int keccak_init(void **state,
                                         size_t capacity_bytes,
--- a/lib/Crypto/IO/PEM.py
+++ b/lib/Crypto/IO/PEM.py
@@ -43,16 +43,16 @@
 
 __all__ = ['encode', 'decode']
 
-from Crypto.Util.py3compat import b, hexlify, unhexlify, tobytes, tostr
+from Cryptodome.Util.py3compat import b, hexlify, unhexlify, tobytes, tostr
 
 import re
 from binascii import a2b_base64, b2a_base64
 
-from Crypto.Hash import MD5
-from Crypto.Util.Padding import pad, unpad
-from Crypto.Cipher import DES, DES3, AES
-from Crypto.Protocol.KDF import PBKDF1
-from Crypto.Random import get_random_bytes
+from Cryptodome.Hash import MD5
+from Cryptodome.Util.Padding import pad, unpad
+from Cryptodome.Cipher import DES, DES3, AES
+from Cryptodome.Protocol.KDF import PBKDF1
+from Cryptodome.Random import get_random_bytes
 
 
 def encode(data, marker, passphrase=None, randfunc=None):
--- a/lib/Crypto/IO/PKCS8.py
+++ b/lib/Crypto/IO/PKCS8.py
@@ -61,16 +61,16 @@
 
 """
 
-from Crypto.Util.py3compat import *
+from Cryptodome.Util.py3compat import *
 
-from Crypto.Util.asn1 import (
+from Cryptodome.Util.asn1 import (
             DerNull,
             DerSequence,
             DerObjectId,
             DerOctetString,
             )
 
-from Crypto.IO._PBES import PBES1, PBES2, PbesError
+from Cryptodome.IO._PBES import PBES1, PBES2, PbesError
 
 
 __all__ = ['wrap', 'unwrap']
--- a/lib/Crypto/IO/_PBES.py
+++ b/lib/Crypto/IO/_PBES.py
@@ -31,18 +31,18 @@
 # POSSIBILITY OF SUCH DAMAGE.
 # ===================================================================
 
-from Crypto.Util.py3compat import *
+from Cryptodome.Util.py3compat import *
 
-from Crypto import Random
-from Crypto.Util.asn1 import (
+from Cryptodome import Random
+from Cryptodome.Util.asn1 import (
             DerSequence, DerOctetString,
             DerObjectId, DerInteger,
             )
 
-from Crypto.Util.Padding import pad, unpad
-from Crypto.Hash import MD5, SHA1
-from Crypto.Cipher import DES, ARC2, DES3, AES
-from Crypto.Protocol.KDF import PBKDF1, PBKDF2, scrypt
+from Cryptodome.Util.Padding import pad, unpad
+from Cryptodome.Hash import MD5, SHA1
+from Cryptodome.Cipher import DES, ARC2, DES3, AES
+from Cryptodome.Protocol.KDF import PBKDF1, PBKDF2, scrypt
 
 class PbesError(ValueError):
     pass
--- a/lib/Crypto/IO/__init__.py
+++ b/lib/Crypto/IO/__init__.py
@@ -34,8 +34,8 @@
 ========================  =============================================
 Module                    Description
 ========================  =============================================
-Crypto.Util.PEM           Set of functions for encapsulating data according to the PEM format.
-Crypto.Util.PKCS8         Set of functions for wrapping/unwrapping private keys.
+Cryptodome.Util.PEM           Set of functions for encapsulating data according to the PEM format.
+Cryptodome.Util.PKCS8         Set of functions for wrapping/unwrapping private keys.
 ========================  =============================================
 
 :undocumented: _PBES
--- a/lib/Crypto/Math/Numbers.py
+++ b/lib/Crypto/Math/Numbers.py
@@ -35,14 +35,14 @@
 
 __all__ = ["Integer"]
 
-from Crypto.Util.py3compat import *
-from Crypto import Random
+from Cryptodome.Util.py3compat import *
+from Cryptodome import Random
 
 try:
-    from Crypto.Math._Numbers_gmp import Integer
-    from Crypto.Math._Numbers_gmp import implementation as _implementation
+    from Cryptodome.Math._Numbers_gmp import Integer
+    from Cryptodome.Math._Numbers_gmp import implementation as _implementation
 except (ImportError, OSError):
-    from Crypto.Math._Numbers_int import Integer
+    from Cryptodome.Math._Numbers_int import Integer
     _implementation = { }
 
 
--- a/lib/Crypto/Math/Primality.py
+++ b/lib/Crypto/Math/Primality.py
@@ -33,8 +33,8 @@
 :undocumented: __package__
 """
 
-from Crypto.Math.Numbers import Integer
-from Crypto import Random
+from Cryptodome.Math.Numbers import Integer
+from Cryptodome import Random
 
 COMPOSITE = 0
 PROBABLY_PRIME = 1
@@ -202,7 +202,7 @@
     return COMPOSITE
 
 
-from Crypto.Util.number import sieve_base as _sieve_base
+from Cryptodome.Util.number import sieve_base as _sieve_base
 ## The optimal number of small primes to use for the sieve
 ## is probably dependent on the platform and the candidate size
 _sieve_base = _sieve_base[:100]
--- a/lib/Crypto/Math/_Numbers_gmp.py
+++ b/lib/Crypto/Math/_Numbers_gmp.py
@@ -28,9 +28,9 @@
 # POSSIBILITY OF SUCH DAMAGE.
 # ===================================================================
 
-from Crypto.Util.py3compat import tobytes, b, bchr
+from Cryptodome.Util.py3compat import tobytes, b, bchr
 
-from Crypto.Util._raw_api import (backend, load_lib,
+from Cryptodome.Util._raw_api import (backend, load_lib,
                                   get_raw_buffer, get_c_string,
                                   null_pointer, create_string_buffer,
                                   c_ulong, c_ulonglong, c_size_t)
@@ -109,9 +109,9 @@
         c_ulong = c_ulonglong
     # Try to load private MPIR lib first (wheel)
     try:
-        from Crypto.Util._file_system import pycryptodome_filename
+        from Cryptodome.Util._file_system import pycryptodome_filename
 
-        mpir_dll = pycryptodome_filename(("Crypto", "Math"), "mpir.dll")
+        mpir_dll = pycryptodome_filename(("Cryptodome", "Math"), "mpir.dll")
         lib = load_lib(mpir_dll, gmp_defs)
     except OSError:
         lib = load_lib("mpir", gmp_defs)
@@ -134,7 +134,7 @@
 
 else:
     # We are using CFFI
-    from Crypto.Util._raw_api import ffi
+    from Cryptodome.Util._raw_api import ffi
 
     def new_mpz():
         return ffi.new("MPZ*")
--- a/lib/Crypto/Math/_Numbers_int.py
+++ b/lib/Crypto/Math/_Numbers_int.py
@@ -28,8 +28,8 @@
 # POSSIBILITY OF SUCH DAMAGE.
 # ===================================================================
 
-from Crypto.Util.number import long_to_bytes, bytes_to_long
-from Crypto.Util.py3compat import maxint
+from Cryptodome.Util.number import long_to_bytes, bytes_to_long
+from Cryptodome.Util.py3compat import maxint
 
 class Integer(object):
     """A class to model a natural integer (including zero)"""
--- a/lib/Crypto/Protocol/KDF.py
+++ b/lib/Crypto/Protocol/KDF.py
@@ -34,23 +34,23 @@
 import struct
 from struct import unpack
 
-from Crypto.Util.py3compat import *
+from Cryptodome.Util.py3compat import *
 
-from Crypto.Hash import SHA1, SHA256, HMAC, CMAC
-from Crypto.Util.strxor import strxor
-from Crypto.Util.number import size as bit_size, long_to_bytes, bytes_to_long
+from Cryptodome.Hash import SHA1, SHA256, HMAC, CMAC
+from Cryptodome.Util.strxor import strxor
+from Cryptodome.Util.number import size as bit_size, long_to_bytes, bytes_to_long
 
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib,
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib,
                                   create_string_buffer,
                                   get_raw_buffer, c_size_t)
 
-_raw_salsa20_lib = load_pycryptodome_raw_lib("Crypto.Cipher._Salsa20",
+_raw_salsa20_lib = load_pycryptodome_raw_lib("Cryptodome.Cipher._Salsa20",
                     """
                     int Salsa20_8_core(const uint8_t *x, const uint8_t *y,
                                        uint8_t *out);
                     """)
 
-_raw_scrypt_lib = load_pycryptodome_raw_lib("Crypto.Protocol._scrypt",
+_raw_scrypt_lib = load_pycryptodome_raw_lib("Cryptodome.Protocol._scrypt",
                     """
                     typedef int (core_t)(const uint8_t [64], const uint8_t [64], uint8_t [64]);
                     int scryptROMix(const uint8_t *data_in, uint8_t *data_out,
--- a/lib/Crypto/Protocol/SecretSharing.py
+++ b/lib/Crypto/Protocol/SecretSharing.py
@@ -40,10 +40,10 @@
 secret, unless *k* players gather together to assemble their shares.
 """
 
-from Crypto.Util.py3compat import *
-from Crypto.Util import number
-from Crypto.Util.number import long_to_bytes, bytes_to_long
-from Crypto.Random import get_random_bytes as rng
+from Cryptodome.Util.py3compat import *
+from Cryptodome.Util import number
+from Cryptodome.Util.number import long_to_bytes, bytes_to_long
+from Cryptodome.Random import get_random_bytes as rng
 
 def _mult_gf2(f1, f2):
     """Multiply two polynomials in GF(2)"""
--- a/lib/Crypto/Protocol/__init__.py
+++ b/lib/Crypto/Protocol/__init__.py
@@ -33,10 +33,10 @@
 Implements various cryptographic protocols.  (Don't expect to find
 network protocols here.)
 
-Crypto.Protocol.KDF
+Cryptodome.Protocol.KDF
  A collection of standard key derivation functions.
 
-Crypto.Protocol.SecretSharing
+Cryptodome.Protocol.SecretSharing
  Distribute a secret amongst a group of participants.
 """
 
--- a/lib/Crypto/PublicKey/DSA.py
+++ b/lib/Crypto/PublicKey/DSA.py
@@ -89,22 +89,22 @@
 import struct
 import itertools
 
-from Crypto.Util.py3compat import *
+from Cryptodome.Util.py3compat import *
 
-from Crypto import Random
-from Crypto.IO import PKCS8, PEM
-from Crypto.Hash import SHA256
-from Crypto.Util.asn1 import (
+from Cryptodome import Random
+from Cryptodome.IO import PKCS8, PEM
+from Cryptodome.Hash import SHA256
+from Cryptodome.Util.asn1 import (
                 DerObject, DerSequence,
                 DerInteger, DerObjectId,
                 DerBitString,
                 )
 
-from Crypto.Math.Numbers import Integer
-from Crypto.Math.Primality import (test_probable_prime, COMPOSITE,
+from Cryptodome.Math.Numbers import Integer
+from Cryptodome.Math.Primality import (test_probable_prime, COMPOSITE,
                                    PROBABLY_PRIME)
 
-from Crypto.PublicKey import (_expand_subject_public_key_info,
+from Cryptodome.PublicKey import (_expand_subject_public_key_info,
                               _create_subject_public_key_info,
                               _extract_subject_public_key_info)
 
@@ -379,10 +379,10 @@
     # Methods defined in PyCrypto that we don't support anymore
 
     def sign(self, M, K):
-        raise NotImplementedError("Use module Crypto.Signature.DSS instead")
+        raise NotImplementedError("Use module Cryptodome.Signature.DSS instead")
 
     def verify(self, M, signature):
-        raise NotImplementedError("Use module Crypto.Signature.DSS instead")
+        raise NotImplementedError("Use module Cryptodome.Signature.DSS instead")
 
     def encrypt(self, plaintext, K):
         raise NotImplementedError
--- a/lib/Crypto/PublicKey/ECC.py
+++ b/lib/Crypto/PublicKey/ECC.py
@@ -78,15 +78,15 @@
 import struct
 import binascii
 
-from Crypto.Util.py3compat import bord, tobytes, b, tostr, bchr
+from Cryptodome.Util.py3compat import bord, tobytes, b, tostr, bchr
 
-from Crypto.Math.Numbers import Integer
-from Crypto.Random import get_random_bytes
-from Crypto.Util.asn1 import (DerObjectId, DerOctetString, DerSequence,
+from Cryptodome.Math.Numbers import Integer
+from Cryptodome.Random import get_random_bytes
+from Cryptodome.Util.asn1 import (DerObjectId, DerOctetString, DerSequence,
                               DerBitString)
 
-from Crypto.IO import PKCS8, PEM
-from Crypto.PublicKey import (_expand_subject_public_key_info,
+from Cryptodome.IO import PKCS8, PEM
+from Cryptodome.PublicKey import (_expand_subject_public_key_info,
                               _create_subject_public_key_info,
                               _extract_subject_public_key_info)
 
--- a/lib/Crypto/PublicKey/ElGamal.py
+++ b/lib/Crypto/PublicKey/ElGamal.py
@@ -106,10 +106,10 @@
 
 __all__ = ['generate', 'construct', 'ElGamalKey']
 
-from Crypto import Random
-from Crypto.Math.Primality import ( generate_probable_safe_prime,
+from Cryptodome import Random
+from Cryptodome.Math.Primality import ( generate_probable_safe_prime,
                                     test_probable_prime, COMPOSITE )
-from Crypto.Math.Numbers import Integer
+from Cryptodome.Math.Numbers import Integer
 
 # Generate an ElGamal key with N bits
 def generate(bits, randfunc):
--- a/lib/Crypto/PublicKey/RSA.py
+++ b/lib/Crypto/PublicKey/RSA.py
@@ -75,16 +75,16 @@
 import binascii
 import struct
 
-from Crypto import Random
-from Crypto.IO import PKCS8, PEM
-from Crypto.Util.py3compat import tobytes, bord, bchr, b, tostr
-from Crypto.Util.asn1 import DerSequence
+from Cryptodome import Random
+from Cryptodome.IO import PKCS8, PEM
+from Cryptodome.Util.py3compat import tobytes, bord, bchr, b, tostr
+from Cryptodome.Util.asn1 import DerSequence
 
-from Crypto.Math.Numbers import Integer
-from Crypto.Math.Primality import (test_probable_prime,
+from Cryptodome.Math.Numbers import Integer
+from Cryptodome.Math.Primality import (test_probable_prime,
                                    generate_probable_prime, COMPOSITE)
 
-from Crypto.PublicKey import (_expand_subject_public_key_info,
+from Cryptodome.PublicKey import (_expand_subject_public_key_info,
                               _create_subject_public_key_info,
                               _extract_subject_public_key_info)
 
@@ -381,16 +381,16 @@
 
     # Methods defined in PyCrypto that we don't support anymore
     def sign(self, M, K):
-        raise NotImplementedError("Use module Crypto.Signature.pkcs1_15 instead")
+        raise NotImplementedError("Use module Cryptodome.Signature.pkcs1_15 instead")
 
     def verify(self, M, signature):
-        raise NotImplementedError("Use module Crypto.Signature.pkcs1_15 instead")
+        raise NotImplementedError("Use module Cryptodome.Signature.pkcs1_15 instead")
 
     def encrypt(self, plaintext, K):
-        raise NotImplementedError("Use module Crypto.Cipher.PKCS1_OAEP instead")
+        raise NotImplementedError("Use module Cryptodome.Cipher.PKCS1_OAEP instead")
 
     def decrypt(self, ciphertext):
-        raise NotImplementedError("Use module Crypto.Cipher.PKCS1_OAEP instead")
+        raise NotImplementedError("Use module Cryptodome.Cipher.PKCS1_OAEP instead")
 
     def blind(self, M, B):
         raise NotImplementedError
--- a/lib/Crypto/PublicKey/__init__.py
+++ b/lib/Crypto/PublicKey/__init__.py
@@ -26,7 +26,7 @@
 be used to sign messages, and some can *only* be used for signatures.
 """
 
-from Crypto.Util.asn1 import (DerSequence, DerInteger, DerBitString,
+from Cryptodome.Util.asn1 import (DerSequence, DerInteger, DerBitString,
                              DerObjectId, DerNull)
 
 
--- a/lib/Crypto/Random/random.py
+++ b/lib/Crypto/Random/random.py
@@ -26,7 +26,7 @@
 
 __all__ = ['StrongRandom', 'getrandbits', 'randrange', 'randint', 'choice', 'shuffle', 'sample']
 
-from Crypto import Random
+from Cryptodome import Random
 
 class StrongRandom(object):
     def __init__(self, rng=None, randfunc=None):
@@ -133,6 +133,6 @@
 sample = _r.sample
 
 # These are at the bottom to avoid problems with recursive imports
-from Crypto.Util.number import ceil_div, bytes_to_long, long_to_bytes, size
+from Cryptodome.Util.number import ceil_div, bytes_to_long, long_to_bytes, size
 
 # vim:set ts=4 sw=4 sts=4 expandtab:
--- a/lib/Crypto/Signature/DSS.py
+++ b/lib/Crypto/Signature/DSS.py
@@ -63,15 +63,15 @@
 
 __all__ = ['new', 'DssSigScheme']
 
-from Crypto.Util.py3compat import bchr, b
+from Cryptodome.Util.py3compat import bchr, b
 
 
-from Crypto.Util.asn1 import DerSequence
-from Crypto.Util.number import long_to_bytes
-from Crypto.Math.Numbers import Integer
+from Cryptodome.Util.asn1 import DerSequence
+from Cryptodome.Util.number import long_to_bytes
+from Cryptodome.Math.Numbers import Integer
 
-from Crypto.Hash import HMAC
-from Crypto.PublicKey.ECC import _curve, EccKey
+from Cryptodome.Hash import HMAC
+from Cryptodome.PublicKey.ECC import _curve, EccKey
 
 
 class DssSigScheme(object):
--- a/lib/Crypto/Signature/PKCS1_PSS.py
+++ b/lib/Crypto/Signature/PKCS1_PSS.py
@@ -36,7 +36,7 @@
 
 import types
 
-from Crypto.Signature import pss
+from Cryptodome.Signature import pss
 
 
 def _pycrypto_verify(self, hash_object, signature):
--- a/lib/Crypto/Signature/PKCS1_v1_5.py
+++ b/lib/Crypto/Signature/PKCS1_v1_5.py
@@ -36,7 +36,7 @@
 
 import types
 
-from Crypto.Signature import pkcs1_15
+from Cryptodome.Signature import pkcs1_15
 
 def _pycrypto_verify(self, hash_object, signature):
     try:
--- a/lib/Crypto/Signature/pkcs1_15.py
+++ b/lib/Crypto/Signature/pkcs1_15.py
@@ -64,11 +64,11 @@
 .. __: http://www.rsa.com/rsalabs/node.asp?id=2125
 """
 
-from Crypto.Util.py3compat import b, bchr
+from Cryptodome.Util.py3compat import b, bchr
 
-import Crypto.Util.number
-from Crypto.Util.number import ceil_div, bytes_to_long, long_to_bytes
-from Crypto.Util.asn1 import DerSequence, DerNull, DerOctetString, DerObjectId
+import Cryptodome.Util.number
+from Cryptodome.Util.number import ceil_div, bytes_to_long, long_to_bytes
+from Cryptodome.Util.asn1 import DerSequence, DerNull, DerOctetString, DerObjectId
 
 class PKCS115_SigScheme:
     """An instance of the PKCS#1 v1.5 signature scheme for a specific RSA key."""
@@ -107,7 +107,7 @@
         """
 
         # See 8.2.1 in RFC3447
-        modBits = Crypto.Util.number.size(self._key.n)
+        modBits = Cryptodome.Util.number.size(self._key.n)
         k = ceil_div(modBits,8) # Convert from bits to bytes
 
         # Step 1
@@ -141,7 +141,7 @@
         """
 
         # See 8.2.2 in RFC3447
-        modBits = Crypto.Util.number.size(self._key.n)
+        modBits = Cryptodome.Util.number.size(self._key.n)
         k = ceil_div(modBits, 8) # Convert from bits to bytes
 
         # Step 1
--- a/lib/Crypto/Signature/pss.py
+++ b/lib/Crypto/Signature/pss.py
@@ -64,14 +64,14 @@
 .. __: http://www.rsa.com/rsalabs/node.asp?id=2125
 """
 
-from Crypto.Util.py3compat import b, bchr, bord
-import Crypto.Util.number
-from Crypto.Util.number import (ceil_div,
+from Cryptodome.Util.py3compat import b, bchr, bord
+import Cryptodome.Util.number
+from Cryptodome.Util.number import (ceil_div,
                                 long_to_bytes,
                                 bytes_to_long
                                 )
-from Crypto.Util.strxor import strxor
-from Crypto import Random
+from Cryptodome.Util.strxor import strxor
+from Cryptodome import Random
 
 
 class PSS_SigScheme:
@@ -139,7 +139,7 @@
         else:
             mgf = self._mgfunc
 
-        modBits = Crypto.Util.number.size(self._key.n)
+        modBits = Cryptodome.Util.number.size(self._key.n)
 
         # See 8.1.1 in RFC3447
         k = ceil_div(modBits, 8)  # k is length in bytes of the modulus
@@ -183,7 +183,7 @@
         else:
             mgf = lambda x, y: MGF1(x, y, msg_hash)
 
-        modBits = Crypto.Util.number.size(self._key.n)
+        modBits = Cryptodome.Util.number.size(self._key.n)
 
         # See 8.1.2 in RFC3447
         k = ceil_div(modBits, 8)  # Convert from bits to bytes
--- a/lib/Crypto/Util/Counter.py
+++ b/lib/Crypto/Util/Counter.py
@@ -54,7 +54,7 @@
 
 """
 
-from Crypto.Util.py3compat import *
+from Cryptodome.Util.py3compat import *
 
 def new(nbits, prefix=b(""), suffix=b(""), initial_value=1, little_endian=False, allow_wraparound=False):
     """Create a stateful counter block function suitable for CTR encryption modes.
--- a/lib/Crypto/Util/Padding.py
+++ b/lib/Crypto/Util/Padding.py
@@ -39,7 +39,7 @@
 
 __all__ = [ 'ValueError', 'pad', 'unpad' ]
 
-from Crypto.Util.py3compat import *
+from Cryptodome.Util.py3compat import *
 
 
 def pad(data_to_pad, block_size, style='pkcs7'):
--- a/lib/Crypto/Util/RFC1751.py
+++ b/lib/Crypto/Util/RFC1751.py
@@ -28,7 +28,7 @@
 
 
 import binascii
-from Crypto.Util.py3compat import *
+from Cryptodome.Util.py3compat import *
 
 binary={0:'0000', 1:'0001', 2:'0010', 3:'0011', 4:'0100', 5:'0101',
         6:'0110', 7:'0111', 8:'1000', 9:'1001', 10:'1010', 11:'1011',
--- a/lib/Crypto/Util/__init__.py
+++ b/lib/Crypto/Util/__init__.py
@@ -21,7 +21,7 @@
 """Miscellaneous modules
 
 Contains useful modules that don't belong into any of the
-other Crypto.* subpackages.
+other Cryptodome.* subpackages.
 
 ========================    =============================================
 Module                      Description
--- a/lib/Crypto/Util/_file_system.py
+++ b/lib/Crypto/Util/_file_system.py
@@ -42,8 +42,8 @@
         The filename (inclusing extension) in the target directory.
     """
 
-    if dir_comps[0] != "Crypto":
-        raise ValueError("Only available for modules under 'Crypto'")
+    if dir_comps[0] != "Cryptodome":
+        raise ValueError("Only available for modules under 'Cryptodome'")
 
     dir_comps = list(dir_comps[1:]) + [filename]
 
--- a/lib/Crypto/Util/_raw_api.py
+++ b/lib/Crypto/Util/_raw_api.py
@@ -30,8 +30,8 @@
 
 import imp
 
-from Crypto.Util.py3compat import byte_string
-from Crypto.Util._file_system import pycryptodome_filename
+from Cryptodome.Util.py3compat import byte_string
+from Cryptodome.Util._file_system import pycryptodome_filename
 
 try:
     from cffi import FFI
--- a/lib/Crypto/Util/asn1.py
+++ b/lib/Crypto/Util/asn1.py
@@ -28,9 +28,9 @@
 
 """
 
-from Crypto.Util.py3compat import byte_string, b, bchr, bord
+from Cryptodome.Util.py3compat import byte_string, b, bchr, bord
 
-from Crypto.Util.number import long_to_bytes, bytes_to_long
+from Cryptodome.Util.number import long_to_bytes, bytes_to_long
 
 __all__ = ['DerObject', 'DerInteger', 'DerOctetString', 'DerNull',
            'DerSequence', 'DerObjectId', 'DerBitString', 'DerSetOf']
--- a/lib/Crypto/Util/number.py
+++ b/lib/Crypto/Util/number.py
@@ -27,10 +27,10 @@
 from warnings import warn as _warn
 import math
 import sys
-from Crypto.Util.py3compat import *
+from Cryptodome.Util.py3compat import *
 
 try:
-    from Crypto.PublicKey import _fastmath
+    from Cryptodome.PublicKey import _fastmath
 except ImportError:
     # For production, we are going to let import issues due to gmp/mpir shared
     # libraries not loading slide silently and use slowmath. If you'd rather
@@ -443,8 +443,8 @@
     # This is called in a function instead of at the module level in order to
     # avoid problems with recursive imports
     global Random, StrongRandom
-    from Crypto import Random
-    from Crypto.Random.random import StrongRandom
+    from Cryptodome import Random
+    from Cryptodome.Random.random import StrongRandom
 
 
 
--- a/lib/Crypto/Util/strxor.py
+++ b/lib/Crypto/Util/strxor.py
@@ -32,11 +32,11 @@
 Fast XOR of byte strings.
 """
 
-from Crypto.Util._raw_api import (load_pycryptodome_raw_lib, c_size_t,
+from Cryptodome.Util._raw_api import (load_pycryptodome_raw_lib, c_size_t,
                                   create_string_buffer, get_raw_buffer,
                                   expect_byte_string)
 
-_raw_strxor = load_pycryptodome_raw_lib("Crypto.Util._strxor",
+_raw_strxor = load_pycryptodome_raw_lib("Cryptodome.Util._strxor",
                     """
                     void strxor(const uint8_t *in1,
                                 const uint8_t *in2,
--- a/lib/Crypto/__init__.py
+++ b/lib/Crypto/__init__.py
@@ -25,19 +25,19 @@
 
 Subpackages:
 
-Crypto.Cipher
+Cryptodome.Cipher
  Secret-key (AES, TDES, Salsa20, ChaCha20, CAST, Blowfish, ARC4) and public-key encryption (RSA PKCS#1) algorithms
-Crypto.Hash
+Cryptodome.Hash
  Hashing algorithms (SHA-1, SHA-2, SHA-3, BLAKE2, HMAC, MD5)
-Crypto.IO
+Cryptodome.IO
  Encodings useful for cryptographic data (PEM, PKCS#8)
-Crypto.Protocol
+Cryptodome.Protocol
  Cryptographic protocols (key derivation functions, Shamir's Secret Sharing scheme)
-Crypto.PublicKey
+Cryptodome.PublicKey
  Public-key generation, import, export (RSA, DSA, ECC)
-Crypto.Signature
+Cryptodome.Signature
  Public-key signature algorithms (RSA PKCS#1, DSA, ECDSA)
-Crypto.Util
+Cryptodome.Util
  Various useful modules and functions (padding, ASN.1, XOR)
 """
 
--- a/src/cast5.c
+++ b/src/cast5.c
@@ -4,7 +4,7 @@
 
 #include "pycrypto_common.h"
 
-static const uint32 S1[256] = {
+static const uint32_t S1[256] = {
 0x30fb40d4, 0x9fa0ff0b, 0x6beccd2f, 0x3f258c7a, 0x1e213f2f,
 0x9c004dd3, 0x6003e540, 0xcf9fc949, 0xbfd4af27, 0x88bbbdb5,
 0xe2034090, 0x98d09675, 0x6e63a0e0, 0x15c361d2, 0xc2e7661d,
@@ -58,7 +58,7 @@
 0xa2f7c579, 0x429ef47d, 0x427b169c, 0x5ac9f049, 0xdd8f0f00,
 0x5c8165bf };
 
-static const uint32 S2[256] = {
+static const uint32_t S2[256] = {
 0x1f201094, 0xef0ba75b, 0x69e3cf7e, 0x393f4380, 0xfe61cf7a,
 0xeec5207a, 0x55889c94, 0x72fc0651, 0xada7ef79, 0x4e1d7235,
 0xd55a63ce, 0xde0436ba, 0x99c430ef, 0x5f0c0794, 0x18dcdb7d,
@@ -112,7 +112,7 @@
 0x06dfdf1e, 0x6c6cc4ef, 0x7160a539, 0x73bfbe70, 0x83877605,
 0x4523ecf1 };
 
-static const uint32 S3[256] = {
+static const uint32_t S3[256] = {
 0x8defc240, 0x25fa5d9f, 0xeb903dbf, 0xe810c907, 0x47607fff,
 0x369fe44b, 0x8c1fc644, 0xaececa90, 0xbeb1f9bf, 0xeefbcaea,
 0xe8cf1950, 0x51df07ae, 0x920e8806, 0xf0ad0548, 0xe13c8d83,
@@ -166,7 +166,7 @@
 0xa4315c11, 0x83323ec5, 0xdfef4636, 0xa133c501, 0xe9d3531c,
 0xee353783 };
 
-static const uint32 S4[256] = {
+static const uint32_t S4[256] = {
 0x9db30420, 0x1fb6e9de, 0xa7be7bef, 0xd273a298, 0x4a4f7bdb,
 0x64ad8c57, 0x85510443, 0xfa020ed1, 0x7e287aff, 0xe60fb663,
 0x095f35a1, 0x79ebf120, 0xfd059d43, 0x6497b7b1, 0xf3641f63,
@@ -220,7 +220,7 @@
 0x851e20fe, 0x9833557e, 0x13ecf0b0, 0xd3ffb372, 0x3f85c5c1,
 0x0aef7ed2 };
 
-static const uint32 S5[256] = {
+static const uint32_t S5[256] = {
 0x7ec90c04, 0x2c6e74b9, 0x9b0e66df, 0xa6337911, 0xb86a7fff,
 0x1dd358f5, 0x44dd9d44, 0x1731167f, 0x08fbf1fa, 0xe7f511cc,
 0xd2051b00, 0x735aba00, 0x2ab722d8, 0x386381cb, 0xacf6243a,
@@ -274,7 +274,7 @@
 0x750e6249, 0xda627e55, 0x5e76ffa8, 0xb1534546, 0x6d47de08,
 0xefe9e7d4 };
 
-static const uint32 S6[256] = {
+static const uint32_t S6[256] = {
 0xf6fa8f9d, 0x2cac6ce1, 0x4ca34867, 0xe2337f7c, 0x95db08e7,
 0x016843b4, 0xeced5cbc, 0x325553ac, 0xbf9f0960, 0xdfa1e2ed,
 0x83f0579d, 0x63ed86b9, 0x1ab6a6b8, 0xde5ebe39, 0xf38ff732,
@@ -328,7 +328,7 @@
 0x38b5f331, 0x7128a454, 0x48392905, 0xa65b1db8, 0x851c97bd,
 0xd675cf2f };
 
-static const uint32 S7[256] = {
+static const uint32_t S7[256] = {
 0x85e04019, 0x332bf567, 0x662dbfff, 0xcfc65693, 0x2a8d7f6f,
 0xab9bc912, 0xde6008a1, 0x2028da1f, 0x0227bce7, 0x4d642916,
 0x18fac300, 0x50f18b82, 0x2cb2cb11, 0xb232e75c, 0x4b3695f2,
@@ -382,7 +382,7 @@
 0x0fedce83, 0x878ddada, 0xf2a279c7, 0x94e01be8, 0x90716f4b,
 0x954b8aa3 };
 
-static const uint32 S8[256] = {
+static const uint32_t S8[256] = {
 0xe216300d, 0xbbddfffc, 0xa7ebdabd, 0x35648095, 0x7789f8b7,
 0xe6c1121b, 0x0e241600, 0x052ce8b5, 0x11a9cfb0, 0xe5952f11,
 0xece7990a, 0x9386d174, 0x2a42931c, 0x76e38111, 0xb12def3a,
