--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,164 @@
+cmake_minimum_required(VERSION 3.0)
+
+project(libpgp-error VERSION 1.2.7 LANGUAGES C)
+
+if(MSVC)
+  set(CMAKE_DEBUG_POSTFIX "d")
+endif()
+
+find_program(AWK awk)
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(AWK REQUIRED_VARS AWK)
+if(NOT ${AWK_FOUND})
+  message(FATAL_ERROR "AWK not found, can't generate error codes")
+endif()
+
+set(SRCS
+  cmake/libgpg-error.def
+  src/b64dec.c
+  src/code-from-errno.c
+  src/code-to-errno.c
+  src/err-codes.h
+  src/err-sources.h
+  src/estream-printf.c
+  src/estream-printf.h
+  src/estream.c
+  src/gettext.h
+  src/gpg-error.c
+  src/gpgrt-int.h
+  src/init.c
+  src/init.h
+  src/lock.h
+  src/strerror-sym.c
+  src/strerror.c
+  src/strsource-sym.c
+  src/strsource.c
+  src/syscfg/lock-obj-pub.mingw32.h
+  src/thread.h
+  src/version.c
+  src/visibility.c
+  src/visibility.h
+  src/w32-add.h
+  src/w32-estream.c
+  src/w32-gettext.c
+  src/w32-iconv.c
+  src/w32-lock-obj.h
+  src/w32-lock.c
+  src/w32-thread.c
+)
+
+ADD_LIBRARY(libpgp-error ${SRCS})
+SET_TARGET_PROPERTIES(libpgp-error PROPERTIES LINK_FLAGS "/DEF:\"libgpg-error.def\"")
+
+target_compile_definitions(libpgp-error
+  PRIVATE
+  HAVE_CONFIG_H
+  PKGDATADIR=""
+  _CRT_SECURE_NO_WARNINGS
+  _CRT_NONSTDC_NO_WARNINGS)
+
+target_include_directories(libpgp-error
+  PRIVATE
+  $<BUILD_INTERFACE:.;cmake;src;src/syscfg;${CMAKE_CURRENT_BINARY_DIR}>
+  INTERFACE
+  $<INSTALL_INTERFACE:include/libpgp-errors>
+)
+
+add_custom_command(
+  TARGET libpgp-error
+  PRE_BUILD
+  COMMAND ${AWK} -f ${CMAKE_CURRENT_SOURCE_DIR}/src/mkstrtable.awk -v textidx=3 ${CMAKE_CURRENT_SOURCE_DIR}/src/err-sources.h.in > ${CMAKE_CURRENT_SOURCE_DIR}/cmake/err-sources.h
+  COMMAND ${AWK} -f ${CMAKE_CURRENT_SOURCE_DIR}/src/mkstrtable.awk -v textidx=2 -v nogettext=1 ${CMAKE_CURRENT_SOURCE_DIR}/src/err-sources.h.in > ${CMAKE_CURRENT_SOURCE_DIR}/cmake/err-sources-sym.h
+  COMMAND ${AWK} -f ${CMAKE_CURRENT_SOURCE_DIR}/src/mkstrtable.awk -v textidx=3 ${CMAKE_CURRENT_SOURCE_DIR}/src/err-codes.h.in > ${CMAKE_CURRENT_SOURCE_DIR}/cmake/err-codes.h
+  COMMAND ${AWK} -f ${CMAKE_CURRENT_SOURCE_DIR}/src/mkstrtable.awk -v textidx=2 -v nogettext=1 ${CMAKE_CURRENT_SOURCE_DIR}/src/err-codes.h.in > ${CMAKE_CURRENT_SOURCE_DIR}/cmake/err-codes-sym.h
+  COMMAND ${AWK} -f ${CMAKE_CURRENT_SOURCE_DIR}/src/mkerrnos.awk ${CMAKE_CURRENT_SOURCE_DIR}/src/errnos.in > ${CMAKE_CURRENT_SOURCE_DIR}/cmake/code-to-errno.h
+  COMMAND ${AWK} -f ${CMAKE_CURRENT_SOURCE_DIR}/src/mkstrtable.awk -v textidx=2 -v nogettext=1 -v prefix=GPG_ERR_ -v namespace=errnos_ ${CMAKE_CURRENT_SOURCE_DIR}/src/errnos.in > ${CMAKE_CURRENT_SOURCE_DIR}/cmake/errnos-sym.h
+)
+
+
+ADD_EXECUTABLE(mkheader src/mkheader.c)
+target_compile_definitions(mkheader
+  PRIVATE
+  HAVE_CONFIG_H
+  _CRT_SECURE_NO_WARNINGS
+  _CRT_NONSTDC_NO_WARNINGS)
+  
+target_include_directories(mkheader
+  PRIVATE
+  $<BUILD_INTERFACE:.;cmake;src;${CMAKE_CURRENT_BINARY_DIR}>
+  INTERFACE
+  $<INSTALL_INTERFACE:include/libpgp-errors>
+)
+  
+add_custom_command(TARGET mkheader
+  POST_BUILD
+  COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_CURRENT_SOURCE_DIR}/src $<TARGET_FILE:mkheader> "mingw32" "win32-msvc" "gpg-error.h.in" ${CMAKE_CURRENT_SOURCE_DIR}/cmake/config.h "1.27" "0x011b00" > ${CMAKE_CURRENT_SOURCE_DIR}/cmake/gpg-error.h
+)
+
+ADD_EXECUTABLE(mkerrcodes src/mkerrcodes.c)
+target_compile_definitions(mkerrcodes
+  PRIVATE
+  HAVE_CONFIG_H
+  _CRT_SECURE_NO_WARNINGS
+  _CRT_NONSTDC_NO_WARNINGS)
+  
+target_include_directories(mkerrcodes
+  PRIVATE
+  $<BUILD_INTERFACE:.;cmake;src;${CMAKE_CURRENT_BINARY_DIR}>
+  INTERFACE
+  $<INSTALL_INTERFACE:include/libpgp-errors>
+)
+
+add_custom_command(
+  TARGET mkerrcodes
+  PRE_BUILD 
+  COMMAND ${AWK} -f ${CMAKE_CURRENT_SOURCE_DIR}/src/mkerrcodes1.awk ${CMAKE_CURRENT_SOURCE_DIR}/src/errnos.in > ${CMAKE_CURRENT_SOURCE_DIR}/cmake/_mkerrcodes.h
+  COMMAND cl -E ${CMAKE_CURRENT_SOURCE_DIR}/cmake/_mkerrcodes.h | findstr GPG_ERR_ | \"${AWK}\" -f ${CMAKE_CURRENT_SOURCE_DIR}/src/mkerrcodes.awk > ${CMAKE_CURRENT_SOURCE_DIR}/cmake/mkerrcodes.h
+  COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_CURRENT_SOURCE_DIR}/cmake/_mkerrcodes.h
+)
+
+add_custom_command(
+  TARGET mkerrcodes
+  POST_BUILD 
+  COMMAND $<TARGET_FILE:mkerrcodes> | \"${AWK}\" -f ${CMAKE_CURRENT_SOURCE_DIR}/src/mkerrcodes2.awk > ${CMAKE_CURRENT_SOURCE_DIR}/cmake/code-from-errno.h
+)
+
+add_dependencies(libpgp-error mkheader)
+add_dependencies(libpgp-error mkerrcodes)
+
+include(CMakePackageConfigHelpers)
+write_basic_package_version_file(
+  ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake
+  VERSION ${PROJECT_VERSION}
+  COMPATIBILITY AnyNewerVersion
+)
+
+install(TARGETS ${PROJECT_NAME} EXPORT ${PROJECT_NAME}
+  RUNTIME DESTINATION bin
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib
+)
+
+install(FILES cmake/gpg-error.h DESTINATION include/libpgp-errors)
+
+if(MSVC)
+  set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_PDB_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR} COMPILE_PDB_NAME ${PROJECT_NAME})
+  install(FILES ${PROJECT_BINARY_DIR}/RelWithDebInfo/libpgp-error.pdb DESTINATION lib CONFIGURATIONS RelWithDebInfo)
+endif()
+
+install(EXPORT ${PROJECT_NAME}
+  FILE
+    ${PROJECT_NAME}.cmake
+  NAMESPACE
+    ${PROJECT_NAME}::
+  DESTINATION
+    lib/cmake/${PROJECT_NAME}
+)
+
+install(
+  FILES
+    cmake/${PROJECT_NAME}-config.cmake
+    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake
+  DESTINATION
+    lib/cmake/${PROJECT_NAME}
+)
--- /dev/null
+++ b/cmake/config.h
@@ -0,0 +1,201 @@
+
+/* Define to 1 if translation of program messages to the user's native
+   language is requested. */
+/* #undef ENABLE_NLS */
+
+/* Define to use the GNU C visibility attribute. */
+/* #undef GPGRT_USE_VISIBILITY */
+
+/* Define to 1 if you have the Mac OS X function CFLocaleCopyCurrent in the
+   CoreFoundation framework. */
+/* #undef HAVE_CFLOCALECOPYCURRENT */
+
+/* Define to 1 if you have the Mac OS X function CFPreferencesCopyAppValue in
+   the CoreFoundation framework. */
+/* #undef HAVE_CFPREFERENCESCOPYAPPVALUE */
+
+/* Define if the GNU dcgettext() function is already present or preinstalled.
+   */
+/* #undef HAVE_DCGETTEXT */
+
+/* Define to 1 if you have the declaration of `strerror_r', and to 0 if you
+   don't. */
+#define HAVE_DECL_STRERROR_R 0
+
+/* Define to 1 if you have the <dlfcn.h> header file. */
+/* #undef HAVE_DLFCN_H */
+
+/* Define to 1 if you have the `flockfile' function. */
+/* #undef HAVE_FLOCKFILE */
+
+/* Defined if a GCC style "__attribute__ ((aligned (n))" is supported */
+/* #undef HAVE_GCC_ATTRIBUTE_ALIGNED */
+
+/* Define if the GNU gettext() function is already present or preinstalled. */
+/* #undef HAVE_GETTEXT */
+
+/* Define if you have the iconv() function and it works. */
+#define HAVE_ICONV 1
+
+/* Define to 1 if the system has the type `intmax_t'. */
+#define HAVE_INTMAX_T 1
+
+/* Define to 1 if you have the <inttypes.h> header file. */
+#define HAVE_INTTYPES_H 1
+
+/* Define if you have <langinfo.h> and nl_langinfo(THOUSANDS_SEP). */
+/* #undef HAVE_LANGINFO_THOUSANDS_SEP */
+
+/* Define to 1 if you have the <locale.h> header file. */
+#define HAVE_LOCALE_H 1
+
+/* Define to 1 if the system has the type `long double'. */
+#define HAVE_LONG_DOUBLE 1
+
+/* Define to 1 if the system has the type 'long long int'. */
+#define HAVE_LONG_LONG_INT 1
+
+/* Define to 1 if you have the <memory.h> header file. */
+#define HAVE_MEMORY_H 1
+
+/* Define to 1 if you have the `memrchr' function. */
+/* #undef HAVE_MEMRCHR */
+
+/* Define if the <pthread.h> defines PTHREAD_MUTEX_RECURSIVE. */
+/* #undef HAVE_PTHREAD_MUTEX_RECURSIVE */
+
+/* Define if the POSIX multithreading library has read/write locks. */
+/* #undef HAVE_PTHREAD_RWLOCK */
+
+/* Define to 1 if the system has the type `ptrdiff_t'. */
+#define HAVE_PTRDIFF_T 1
+
+/* Define to 1 if you have the <stdint.h> header file. */
+#define HAVE_STDINT_H 1
+
+/* Define to 1 if you have the <stdlib.h> header file. */
+#define HAVE_STDLIB_H 1
+
+/* Define to 1 if you have the `strerror_r' function. */
+/* #undef HAVE_STRERROR_R */
+
+/* Define to 1 if you have the <strings.h> header file. */
+/* #undef HAVE_STRINGS_H */
+
+/* Define to 1 if you have the <string.h> header file. */
+#define HAVE_STRING_H 1
+
+/* Define to 1 if you have the <sys/select.h> header file. */
+/* #undef HAVE_SYS_SELECT_H */
+
+/* Define to 1 if you have the <sys/stat.h> header file. */
+#define HAVE_SYS_STAT_H 1
+
+/* Define to 1 if you have the <sys/time.h> header file. */
+/* #undef HAVE_SYS_TIME_H */
+
+/* Define to 1 if you have the <sys/types.h> header file. */
+#define HAVE_SYS_TYPES_H 1
+
+/* Define to 1 if the system has the type `uintmax_t'. */
+#define HAVE_UINTMAX_T 1
+
+/* Define to 1 if you have the <unistd.h> header file. */
+#define HAVE_UNISTD_H 1
+
+/* Define to 1 if the system has the type 'unsigned long long int'. */
+#define HAVE_UNSIGNED_LONG_LONG_INT 1
+
+/* Define to 1 if you have the `vasprintf' function. */
+#define HAVE_VASPRINTF 1
+
+/* Defined if we run on WindowsCE */
+/* #undef HAVE_W32CE_SYSTEM */
+
+/* Defined if we run on a W32 API based system */
+#define HAVE_W32_SYSTEM 1
+
+/* Defined if we run on 64 bit W32 API system */
+#if defined(__x86_64) || defined(_M_X64)
+#define HAVE_W64_SYSTEM 1
+#endif
+
+/* Define to 1 if you have the <winsock2.h> header file. */
+#define HAVE_WINSOCK2_H 1;
+
+/* Name of package */
+#define PACKAGE "libgpg-error"
+
+/* Define to the full name of this package. */
+#define PACKAGE_NAME "libgpg-error"
+
+#include "version.h"
+
+/* Define if the pthread_in_use() detection is hard. */
+/* #undef PTHREAD_IN_USE_DETECTION_HARD */
+
+/* Used by mkheader to insert the replacement type. */
+#define REPLACEMENT_FOR_OFF_T "int64_t"
+
+/* The size of `int', as computed by sizeof. */
+#define SIZEOF_INT 4
+
+/* The size of `long', as computed by sizeof. */
+#define SIZEOF_LONG 4
+
+/* The size of `long long', as computed by sizeof. */
+#define SIZEOF_LONG_LONG 8
+
+/* The size of `pthread_mutex_t', as computed by sizeof. */
+/* #undef SIZEOF_PTHREAD_MUTEX_T */
+
+/* The size of `unsigned long', as computed by sizeof. */
+#define SIZEOF_UNSIGNED_LONG 4
+
+/* The size of `void *', as computed by sizeof. */
+#if defined(__x86_64) || defined(_M_X64)
+#define SIZEOF_VOID_P 8
+#else
+#define SIZEOF_VOID_P 4
+#endif
+
+/* Define to 1 if you have the ANSI C header files. */
+#define STDC_HEADERS 1
+
+/* Define to 1 if strerror_r returns char *. */
+/* #undef STRERROR_R_CHAR_P */
+
+/* Define if the POSIX multithreading library can be used. */
+/* #undef USE_POSIX_THREADS */
+
+/* Define if references to the POSIX multithreading library should be made
+   weak. */
+/* #undef USE_POSIX_THREADS_WEAK */
+
+/* Define if the old Solaris multithreading library can be used. */
+/* #undef USE_SOLARIS_THREADS */
+
+/* Define if references to the old Solaris multithreading library should be
+   made weak. */
+/* #undef USE_SOLARIS_THREADS_WEAK */
+
+
+/* Define if the native Windows multithreading API can be used. */
+#define USE_WINDOWS_THREADS 1
+
+
+/* Force using of NLS for W32 even if no libintl has been found.  This is
+   okay because we have our own gettext implementation for W32.  */
+#if defined(HAVE_W32_SYSTEM) && !defined(ENABLE_NLS)
+#define ENABLE_NLS 1
+#endif
+
+/* Connect the generic estream-printf.c to our framework.  */
+#define _ESTREAM_PRINTF_REALLOC _gpgrt_realloc
+#define _ESTREAM_PRINTF_EXTRA_INCLUDE "gpgrt-int.h"
+
+/* For building we need to define these macro.  */
+#define GPG_ERR_ENABLE_GETTEXT_MACROS 1
+#define GPG_ERR_ENABLE_ERRNO_MACROS 1
+#define GPGRT_ENABLE_ES_MACROS 1
+
--- /dev/null
+++ b/cmake/headers_fixup.h
@@ -0,0 +1,97 @@
+#ifdef _MSC_VER /* help visual studio compile vlc headers */
+
+#define WIN32_LEAN_AND_MEAN
+
+# ifndef snwprintf
+#  define snwprintf _snwprintf
+# endif
+# ifndef __cplusplus
+#  define inline __inline
+# endif
+# define strdup _strdup
+typedef signed long int ssize_t;
+typedef signed long int off_t;
+typedef unsigned int mode_t;
+//# define N_(x) x
+//# define _(x) x
+
+# define alloca _alloca
+# define bzero(a,b) memset( (a), 0, (b) )
+# define bcopy memcpy
+# define bcmp memcmp
+
+// Stats part
+
+#define	_S_IFBLK	0x3000	/* Block: Is this ever set under w32? */
+
+#define _S_IFMT 0xF000
+#define _S_IFDIR 0x4000
+#define _S_IFCHR 0x2000
+#define _S_IFIFO 0x1000
+#define _S_IFREG 0x8000
+#define _S_IREAD 0x0100
+#define _S_IWRITE 0x0080
+#define _S_IEXEC 0x0040
+
+#define S_IFMT _S_IFMT
+#define S_IFDIR _S_IFDIR
+#define S_IFCHR _S_IFCHR
+#define S_IFREG _S_IFREG
+#define S_IREAD _S_IREAD
+#define S_IWRITE _S_IWRITE
+#define S_IEXEC _S_IEXEC
+#define	S_IFIFO		_S_IFIFO
+#define	S_IFBLK		_S_IFBLK
+
+#define	_S_IRWXU	(_S_IREAD | _S_IWRITE | _S_IEXEC)
+#define	_S_IXUSR	_S_IEXEC
+#define	_S_IWUSR	_S_IWRITE
+
+#define	S_IRWXU		_S_IRWXU
+#define	S_IXUSR		_S_IXUSR
+#define	S_IWUSR		_S_IWUSR
+#define	S_IRUSR		_S_IRUSR
+#define	_S_IRUSR	_S_IREAD
+
+# ifndef S_ISREG
+#  define S_ISREG(m) (((m) & S_IFMT) == S_IFREG)
+# endif
+
+#ifndef S_ISDIR
+# define S_ISDIR(mode)  (((mode) & S_IFMT) == S_IFDIR)
+#endif
+
+#define	S_ISFIFO(m)	(((m) & S_IFMT) == S_IFIFO)
+#define	S_ISCHR(m)	(((m) & S_IFMT) == S_IFCHR)
+#define	S_ISBLK(m)	(((m) & S_IFMT) == S_IFBLK)
+
+#define __func__ __FUNCDNAME__
+
+# define strcasecmp _stricmp
+# define HAVE_STRCASECMP
+# define strncasecmp _strnicmp
+
+#define HAVE_LLDIV
+#define HAVE_STRNLEN
+#define HAVE_ATOF
+#define HAVE_ATOLL
+#define HAVE_STRTOLL
+#define HAVE_SWAB
+
+/* Values for the second argument to access.
+   These may be OR'd together.  */
+#ifndef R_OK
+# define R_OK    4       /* Test for read permission.  */
+#endif
+
+#ifndef W_OK
+# define W_OK    2       /* Test for write permission.  */
+#endif
+
+#ifndef F_OK
+# define F_OK    0       /* Test for existence.  */
+#endif
+
+#define PATH_MAX MAX_PATH
+
+#endif
--- /dev/null
+++ b/cmake/libpgp-error-config.cmake
@@ -0,0 +1 @@
+include(${CMAKE_CURRENT_LIST_DIR}/libpgp-error.cmake)
--- /dev/null
+++ b/cmake/libgpg-error.def
@@ -0,0 +1,133 @@
+EXPORTS
+ gpg_strerror @1
+ gpg_strerror_r @2
+ gpg_strsource @3
+ gpg_err_code_from_errno @4
+ gpg_err_code_to_errno @5
+
+ gpg_err_code_from_syserror @7
+ gpg_err_set_errno @8
+
+
+
+
+
+ _gpg_w32_bindtextdomain @11
+ _gpg_w32_textdomain @12
+ _gpg_w32_gettext @13
+ _gpg_w32_dgettext @14
+ _gpg_w32_dngettext @15
+ _gpg_w32_gettext_localename @16
+ _gpg_w32_gettext_use_utf8 @17
+
+
+ gpg_error_check_version @19
+
+ gpgrt_lock_init @20
+ gpgrt_lock_lock @21
+ gpgrt_lock_unlock @22
+ gpgrt_lock_destroy @23
+ gpgrt_yield @24
+ gpgrt_lock_trylock @25
+
+ gpgrt_set_syscall_clamp @26
+
+ gpgrt_fopen @27
+ gpgrt_mopen @28
+ gpgrt_fopenmem @29
+ gpgrt_fopenmem_init @30
+ gpgrt_fdopen @31
+ gpgrt_fdopen_nc @32
+ gpgrt_sysopen @33
+ gpgrt_sysopen_nc @34
+ gpgrt_fpopen @35
+ gpgrt_fpopen_nc @36
+ gpgrt_freopen @37
+ gpgrt_fopencookie @38
+ gpgrt_fclose @39
+ gpgrt_fclose_snatch @40
+ gpgrt_onclose @41
+ gpgrt_fileno @42
+ gpgrt_fileno_unlocked @43
+ gpgrt_syshd @44
+ gpgrt_syshd_unlocked @45
+ _gpgrt_set_std_fd @46
+ _gpgrt_get_std_stream @47
+ gpgrt_flockfile @48
+ gpgrt_ftrylockfile @49
+ gpgrt_funlockfile @50
+ gpgrt_feof @51
+ gpgrt_feof_unlocked @52
+ gpgrt_ferror @53
+ gpgrt_ferror_unlocked @54
+ gpgrt_clearerr @55
+ gpgrt_clearerr_unlocked @56
+ gpgrt_fflush @57
+ gpgrt_fseek @58
+ gpgrt_fseeko @59
+ gpgrt_ftell @60
+ gpgrt_ftello @61
+ gpgrt_rewind @62
+ gpgrt_fgetc @63
+ _gpgrt_getc_underflow @64
+ gpgrt_fputc @65
+ _gpgrt_putc_overflow @66
+ gpgrt_ungetc @67
+ gpgrt_read @68
+ gpgrt_write @69
+ gpgrt_write_sanitized @70
+ gpgrt_write_hexstring @71
+ gpgrt_fread @72
+ gpgrt_fwrite @73
+ gpgrt_fgets @74
+ gpgrt_fputs @75
+ gpgrt_fputs_unlocked @76
+ gpgrt_getline @77
+ gpgrt_read_line @78
+ gpgrt_free @79
+ gpgrt_fprintf @80
+ gpgrt_fprintf_unlocked @81
+ gpgrt_printf @82
+ gpgrt_printf_unlocked @83
+ gpgrt_vfprintf @84
+ gpgrt_vfprintf_unlocked @85
+ gpgrt_setvbuf @86
+ gpgrt_setbuf @87
+ gpgrt_set_binary @88
+ gpgrt_tmpfile @89
+ gpgrt_opaque_set @90
+ gpgrt_opaque_get @91
+ gpgrt_fname_set @92
+ gpgrt_fname_get @93
+ gpgrt_asprintf @94
+ gpgrt_vasprintf @95
+ gpgrt_bsprintf @96
+ gpgrt_vbsprintf @97
+ gpgrt_snprintf @98
+ gpgrt_vsnprintf @99
+
+ gpgrt_check_version @100
+ gpg_err_init @101
+ gpg_err_deinit @102
+ gpgrt_set_alloc_func @103
+
+ _gpgrt_pending @104
+ _gpgrt_pending_unlocked @105
+
+ gpgrt_set_nonblock @106
+ gpgrt_get_nonblock @107
+ gpgrt_poll @108
+
+
+ gpgrt_w32_iconv_open @109
+ gpgrt_w32_iconv_close @110
+ gpgrt_w32_iconv @111
+
+
+ gpgrt_get_syscall_clamp @112
+
+ gpgrt_b64dec_start @113
+ gpgrt_b64dec_proc @114
+ gpgrt_b64dec_finish @115
+
+;; end of file with public symbols for Windows.
--- /dev/null
+++ b/cmake/version.h
@@ -0,0 +1,8 @@
+/* Define to the version of this package. */
+#define PACKAGE_VERSION "1.27"
+
+/* GIT commit id revision used to build this package */
+#define BUILD_REVISION "8956a7b"
+
+/* The time this package was configured for a build */
+#define BUILD_TIMESTAMP "2017-03-04T09:55+0000"
--- a/src/estream-printf.c
+++ b/src/estream-printf.c
@@ -85,7 +85,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <unistd.h>
+#include <headers_fixup.h>
 #include <stdarg.h>
 #include <errno.h>
 #include <stddef.h>
--- a/src/estream.c
+++ b/src/estream.c
@@ -74,12 +74,11 @@
 # include <sys/time.h>
 #endif
 #include <sys/types.h>
-#include <sys/file.h>
-#include <sys/stat.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <unistd.h>
+#include <headers_fixup.h>
+#include <io.h>
 #include <stdarg.h>
 #include <fcntl.h>
 #include <errno.h>
--- a/src/gpg-error.c
+++ b/src/gpg-error.c
@@ -50,7 +50,7 @@
 #endif
 
 #include <gpg-error.h>
-
+#include <headers_fixup.h>
 
 #if HAVE_W32_SYSTEM
 /* The implementation follows below.  */
--- a/src/mkheader.c
+++ b/src/mkheader.c
@@ -16,7 +16,8 @@
 #include <stdlib.h>
 #include <string.h>
 #include <errno.h>
-#include <unistd.h>
+#include <headers_fixup.h>
+#include <io.h>
 
 #define PGM "mkheader"
 
--- a/src/w32-estream.c
+++ b/src/w32-estream.c
@@ -39,7 +39,7 @@
 #endif
 #include <io.h>
 #include <windows.h>
-
+#include <headers_fixup.h>
 /* Enable tracing.  The value is the module name to be printed.  */
 /*#define ENABLE_TRACING "estream" */
 
