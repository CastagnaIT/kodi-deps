--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,129 @@
+cmake_minimum_required(VERSION 3.2)
+
+project(libplist LANGUAGES C CXX)
+
+set(libplist_VERSION 1.12)
+
+if(MSVC)
+  set(CMAKE_DEBUG_POSTFIX "d")
+endif()
+
+find_package(libxml2 REQUIRED NO_MODULE)
+find_package(iconv REQUIRED NO_MODULE)
+
+add_library(libcnary STATIC 
+  libcnary/include/iterator.h
+  libcnary/include/list.h
+  libcnary/include/node.h
+  libcnary/include/node_iterator.h
+  libcnary/include/node_list.h
+  libcnary/include/object.h
+  libcnary/iterator.c
+  libcnary/list.c
+  libcnary/node.c
+  libcnary/node_iterator.c
+  libcnary/node_list.c
+)
+
+target_include_directories(libcnary
+  PRIVATE
+  $<BUILD_INTERFACE:libcnary/;libcnary/include>
+  PUBLIC
+  $<INSTALL_INTERFACE:libcnary/include>
+  INTERFACE
+  $<INSTALL_INTERFACE:libcnary/include>
+)
+
+add_library(libplist
+  include/plist/Array.h
+  include/plist/Boolean.h
+  include/plist/Data.h
+  include/plist/Date.h
+  include/plist/Dictionary.h
+  include/plist/Integer.h
+  include/plist/Key.h
+  include/plist/Node.h
+  include/plist/plist.h
+  include/plist/plist++.h
+  include/plist/Real.h
+  include/plist/String.h
+  include/plist/Structure.h
+  include/plist/Uid.h
+  src/Array.cpp
+  src/base64.c
+  src/base64.h
+  src/Boolean.cpp
+  src/bplist.c
+  src/bytearray.c
+  src/bytearray.h
+  src/Data.cpp
+  src/Date.cpp
+  src/Dictionary.cpp
+  src/hashtable.c
+  src/hashtable.h
+  src/Integer.cpp
+  src/Key.cpp
+  src/Node.cpp
+  src/plist.c
+  src/plist.h
+  src/ptrarray.c
+  src/ptrarray.h
+  src/Real.cpp
+  src/String.cpp
+  src/Structure.cpp
+  src/Uid.cpp
+  src/xplist.c
+)
+target_include_directories(
+  libplist PRIVATE
+  $<BUILD_INTERFACE:include/;src/;libcnary/include/>
+  INTERFACE
+  $<INSTALL_INTERFACE:include/plist>
+)
+
+add_dependencies(libplist libcnary)
+target_link_libraries(libplist PRIVATE libcnary libxml2::libxml2 iconv::iconv)
+target_compile_definitions(libplist PRIVATE BUILDING_LIBPLIST)
+if(NOT BUILD_SHARED_LIBS)
+  target_compile_definitions(libplist PRIVATE PLIST_STATICLIB)
+endif()
+
+include(CMakePackageConfigHelpers)
+write_basic_package_version_file(
+  ${CMAKE_CURRENT_BINARY_DIR}/libplist-config-version.cmake
+  VERSION ${libplist_VERSION}
+  COMPATIBILITY AnyNewerVersion
+)
+
+install(TARGETS libplist EXPORT libplist
+  RUNTIME DESTINATION bin
+  ARCHIVE DESTINATION lib
+  LIBRARY DESTINATION lib)
+
+
+install(DIRECTORY
+  include/plist
+  DESTINATION include)
+
+install(EXPORT libplist
+  FILE
+    libplist.cmake
+  NAMESPACE
+    libplist::
+  DESTINATION
+    lib/cmake/libplist
+)
+install(
+  FILES
+    cmake/libplist-config.cmake
+    ${CMAKE_CURRENT_BINARY_DIR}/libplist-config-version.cmake
+  DESTINATION
+    lib/cmake/libplist
+)
+
+if(MSVC AND BUILD_SHARED_LIBS)
+  install(FILES
+    $<TARGET_PDB_FILE:libplist>
+    DESTINATION lib
+  )
+endif()
--- /dev/null
+++ b/cmake/libplist-config.cmake
@@ -0,0 +1 @@
+include(${CMAKE_CURRENT_LIST_DIR}/libplist.cmake)
--- a/include/plist/Date.h
+++ b/include/plist/Date.h
@@ -24,7 +24,11 @@
 
 #include <plist/Node.h>
 #include <ctime>
+#ifdef _MSC_VER
+#include <WinSock2.h>
+#else
 #include <sys/time.h>
+#endif
 
 namespace PList
 {
--- a/include/plist/Dictionary.h
+++ b/include/plist/Dictionary.h
@@ -48,7 +48,11 @@ public :
     iterator Find(const std::string& key);
     iterator Set(const std::string& key, const Node* node);
     iterator Set(const std::string& key, const Node& node);
+#ifdef _MSC_VER
+    PLIST_WARN_DEPRECATED("use Set() instead") iterator Insert(const std::string& key, Node* node);
+#else
     iterator Insert(const std::string& key, Node* node) PLIST_WARN_DEPRECATED("use Set() instead");
+#endif
     void Remove(Node* node);
     void Remove(const std::string& key);
     std::string GetNodeKey(Node* key);
--- a/include/plist/plist.h
+++ b/include/plist/plist.h
@@ -28,7 +28,7 @@
 {
 #endif
 
-#ifdef _MSC_VER
+#if _MSC_VER < 1900
     typedef __int8 int8_t;
     typedef __int16 int16_t;
     typedef __int32 int32_t;
@@ -72,6 +72,20 @@
   #pragma message("WARNING: You need to implement DEPRECATED for this compiler")
 #endif
 
+#ifdef PLIST_STATICLIB
+#  define PLIST_EXTERN
+#elif defined(WIN32)
+#  if defined(BUILDING_LIBPLIST)
+#    define PLIST_EXTERN  __declspec(dllexport)
+#  else
+#    define PLIST_EXTERN  __declspec(dllimport)
+#  endif
+#elif defined(BUILDING_LIBPLIST) && defined(PLIST_HIDDEN_SYMBOLS)
+#  define PLIST_EXTERN PLIST_EXTERN_SYMBOL
+#else
+#  define PLIST_EXTERN
+#endif
+
 #include <sys/types.h>
 #include <stdarg.h>
 
@@ -123,7 +137,7 @@
      * @return the created plist
      * @sa #plist_type
      */
-    plist_t plist_new_dict(void);
+    PLIST_EXTERN plist_t plist_new_dict(void);
 
     /**
      * Create a new root plist_t type #PLIST_ARRAY
@@ -131,7 +145,7 @@
      * @return the created plist
      * @sa #plist_type
      */
-    plist_t plist_new_array(void);
+    PLIST_EXTERN plist_t plist_new_array(void);
 
     /**
      * Create a new plist_t type #PLIST_STRING
@@ -140,7 +154,7 @@
      * @return the created item
      * @sa #plist_type
      */
-    plist_t plist_new_string(const char *val);
+    PLIST_EXTERN plist_t plist_new_string(const char *val);
 
     /**
      * Create a new plist_t type #PLIST_BOOLEAN
@@ -149,7 +163,7 @@
      * @return the created item
      * @sa #plist_type
      */
-    plist_t plist_new_bool(uint8_t val);
+    PLIST_EXTERN plist_t plist_new_bool(uint8_t val);
 
     /**
      * Create a new plist_t type #PLIST_UINT
@@ -158,7 +172,7 @@
      * @return the created item
      * @sa #plist_type
      */
-    plist_t plist_new_uint(uint64_t val);
+    PLIST_EXTERN plist_t plist_new_uint(uint64_t val);
 
     /**
      * Create a new plist_t type #PLIST_REAL
@@ -167,7 +181,7 @@
      * @return the created item
      * @sa #plist_type
      */
-    plist_t plist_new_real(double val);
+    PLIST_EXTERN plist_t plist_new_real(double val);
 
     /**
      * Create a new plist_t type #PLIST_DATA
@@ -177,7 +191,7 @@
      * @return the created item
      * @sa #plist_type
      */
-    plist_t plist_new_data(const char *val, uint64_t length);
+    PLIST_EXTERN plist_t plist_new_data(const char *val, uint64_t length);
 
     /**
      * Create a new plist_t type #PLIST_DATE
@@ -187,7 +201,7 @@
      * @return the created item
      * @sa #plist_type
      */
-    plist_t plist_new_date(int32_t sec, int32_t usec);
+    PLIST_EXTERN plist_t plist_new_date(int32_t sec, int32_t usec);
 
     /**
      * Create a new plist_t type #PLIST_UID
@@ -196,14 +210,14 @@
      * @return the created item
      * @sa #plist_type
      */
-    plist_t plist_new_uid(uint64_t val);
+    PLIST_EXTERN plist_t plist_new_uid(uint64_t val);
 
     /**
      * Destruct a plist_t node and all its children recursively
      *
      * @param plist the plist to free
      */
-    void plist_free(plist_t plist);
+    PLIST_EXTERN void plist_free(plist_t plist);
 
     /**
      * Return a copy of passed node and it's children
@@ -211,7 +225,7 @@
      * @param node the plist to copy
      * @return copied plist
      */
-    plist_t plist_copy(plist_t node);
+    PLIST_EXTERN plist_t plist_copy(plist_t node);
 
 
     /********************************************
@@ -226,7 +240,7 @@
      * @param node the node of type #PLIST_ARRAY
      * @return size of the #PLIST_ARRAY node
      */
-    uint32_t plist_array_get_size(plist_t node);
+    PLIST_EXTERN uint32_t plist_array_get_size(plist_t node);
 
     /**
      * Get the nth item in a #PLIST_ARRAY node.
@@ -235,7 +249,7 @@
      * @param n the index of the item to get. Range is [0, array_size[
      * @return the nth item or NULL if node is not of type #PLIST_ARRAY
      */
-    plist_t plist_array_get_item(plist_t node, uint32_t n);
+    PLIST_EXTERN plist_t plist_array_get_item(plist_t node, uint32_t n);
 
     /**
      * Get the index of an item. item must be a member of a #PLIST_ARRAY node.
@@ -243,7 +257,7 @@
      * @param node the node
      * @return the node index
      */
-    uint32_t plist_array_get_item_index(plist_t node);
+    PLIST_EXTERN uint32_t plist_array_get_item_index(plist_t node);
 
     /**
      * Set the nth item in a #PLIST_ARRAY node.
@@ -253,7 +267,7 @@
      * @param item the new item at index n. The array is responsible for freeing item when it is no longer needed.
      * @param n the index of the item to get. Range is [0, array_size[. Assert if n is not in range.
      */
-    void plist_array_set_item(plist_t node, plist_t item, uint32_t n);
+    PLIST_EXTERN void plist_array_set_item(plist_t node, plist_t item, uint32_t n);
 
     /**
      * Append a new item at the end of a #PLIST_ARRAY node.
@@ -261,7 +275,7 @@
      * @param node the node of type #PLIST_ARRAY
      * @param item the new item. The array is responsible for freeing item when it is no longer needed.
      */
-    void plist_array_append_item(plist_t node, plist_t item);
+    PLIST_EXTERN void plist_array_append_item(plist_t node, plist_t item);
 
     /**
      * Insert a new item at position n in a #PLIST_ARRAY node.
@@ -270,7 +284,7 @@
      * @param item the new item to insert. The array is responsible for freeing item when it is no longer needed.
      * @param n The position at which the node will be stored. Range is [0, array_size[. Assert if n is not in range.
      */
-    void plist_array_insert_item(plist_t node, plist_t item, uint32_t n);
+    PLIST_EXTERN void plist_array_insert_item(plist_t node, plist_t item, uint32_t n);
 
     /**
      * Remove an existing position in a #PLIST_ARRAY node.
@@ -279,7 +293,7 @@
      * @param node the node of type #PLIST_ARRAY
      * @param n The position to remove. Range is [0, array_size[. Assert if n is not in range.
      */
-    void plist_array_remove_item(plist_t node, uint32_t n);
+    PLIST_EXTERN void plist_array_remove_item(plist_t node, uint32_t n);
 
     /********************************************
      *                                          *
@@ -293,7 +307,7 @@
      * @param node the node of type #PLIST_DICT
      * @return size of the #PLIST_DICT node
      */
-    uint32_t plist_dict_get_size(plist_t node);
+    PLIST_EXTERN uint32_t plist_dict_get_size(plist_t node);
 
     /**
      * Create an iterator of a #PLIST_DICT node.
@@ -302,7 +316,7 @@
      * @param node the node of type #PLIST_DICT
      * @param iter iterator of the #PLIST_DICT node
      */
-    void plist_dict_new_iter(plist_t node, plist_dict_iter *iter);
+    PLIST_EXTERN void plist_dict_new_iter(plist_t node, plist_dict_iter *iter);
 
     /**
      * Increment iterator of a #PLIST_DICT node.
@@ -314,7 +328,7 @@
      * @param val a location to store the value, or NULL. The caller should *not*
      *		free the returned value.
      */
-    void plist_dict_next_item(plist_t node, plist_dict_iter iter, char **key, plist_t *val);
+    PLIST_EXTERN void plist_dict_next_item(plist_t node, plist_dict_iter iter, char **key, plist_t *val);
 
     /**
      * Get key associated to an item. Item must be member of a dictionary
@@ -322,7 +336,7 @@
      * @param node the node
      * @param key a location to store the key. The caller is responsible for freeing the returned string.
      */
-    void plist_dict_get_item_key(plist_t node, char **key);
+    PLIST_EXTERN void plist_dict_get_item_key(plist_t node, char **key);
 
     /**
      * Get the nth item in a #PLIST_DICT node.
@@ -332,7 +346,7 @@
      * @return the item or NULL if node is not of type #PLIST_DICT. The caller should not free
      *		the returned node.
      */
-    plist_t plist_dict_get_item(plist_t node, const char* key);
+    PLIST_EXTERN plist_t plist_dict_get_item(plist_t node, const char* key);
 
     /**
      * Set item identified by key in a #PLIST_DICT node.
@@ -343,7 +357,7 @@
      * @param item the new item associated to key
      * @param key the identifier of the item to set.
      */
-    void plist_dict_set_item(plist_t node, const char* key, plist_t item);
+    PLIST_EXTERN void plist_dict_set_item(plist_t node, const char* key, plist_t item);
 
     /**
      * Insert a new item into a #PLIST_DICT node.
@@ -355,7 +369,7 @@
      * @param key The identifier of the item to insert.
      */
     PLIST_WARN_DEPRECATED("use plist_dict_set_item instead")
-    void plist_dict_insert_item(plist_t node, const char* key, plist_t item);
+    PLIST_EXTERN void plist_dict_insert_item(plist_t node, const char* key, plist_t item);
 
     /**
      * Remove an existing position in a #PLIST_DICT node.
@@ -364,7 +378,7 @@
      * @param node the node of type #PLIST_DICT
      * @param key The identifier of the item to remove. Assert if identifier is not present.
      */
-    void plist_dict_remove_item(plist_t node, const char* key);
+    PLIST_EXTERN void plist_dict_remove_item(plist_t node, const char* key);
 
     /**
      * Merge a dictionary into another. This will add all key/value pairs
@@ -374,7 +388,7 @@
      * @param target pointer to an existing node of type #PLIST_DICT
      * @param source node of type #PLIST_DICT that should be merged into target
      */
-    void plist_dict_merge(plist_t *target, plist_t source);
+    PLIST_EXTERN void plist_dict_merge(plist_t *target, plist_t source);
 
 
     /********************************************
@@ -388,7 +402,7 @@
      *
      * @param node the parent (NULL if node is root)
      */
-    plist_t plist_get_parent(plist_t node);
+    PLIST_EXTERN plist_t plist_get_parent(plist_t node);
 
     /**
      * Get the #plist_type of a node.
@@ -396,7 +410,7 @@
      * @param node the node
      * @return the type of the node
      */
-    plist_type plist_get_node_type(plist_t node);
+    PLIST_EXTERN plist_type plist_get_node_type(plist_t node);
 
     /**
      * Get the value of a #PLIST_KEY node.
@@ -406,7 +420,7 @@
      * @param val a pointer to a C-string. This function allocates the memory,
      *            caller is responsible for freeing it.
      */
-    void plist_get_key_val(plist_t node, char **val);
+    PLIST_EXTERN void plist_get_key_val(plist_t node, char **val);
 
     /**
      * Get the value of a #PLIST_STRING node.
@@ -416,7 +430,7 @@
      * @param val a pointer to a C-string. This function allocates the memory,
      *            caller is responsible for freeing it. Data is UTF-8 encoded.
      */
-    void plist_get_string_val(plist_t node, char **val);
+    PLIST_EXTERN void plist_get_string_val(plist_t node, char **val);
 
     /**
      * Get the value of a #PLIST_BOOLEAN node.
@@ -425,7 +439,7 @@
      * @param node the node
      * @param val a pointer to a uint8_t variable.
      */
-    void plist_get_bool_val(plist_t node, uint8_t * val);
+    PLIST_EXTERN void plist_get_bool_val(plist_t node, uint8_t * val);
 
     /**
      * Get the value of a #PLIST_UINT node.
@@ -434,7 +448,7 @@
      * @param node the node
      * @param val a pointer to a uint64_t variable.
      */
-    void plist_get_uint_val(plist_t node, uint64_t * val);
+    PLIST_EXTERN void plist_get_uint_val(plist_t node, uint64_t * val);
 
     /**
      * Get the value of a #PLIST_REAL node.
@@ -443,7 +457,7 @@
      * @param node the node
      * @param val a pointer to a double variable.
      */
-    void plist_get_real_val(plist_t node, double *val);
+    PLIST_EXTERN void plist_get_real_val(plist_t node, double *val);
 
     /**
      * Get the value of a #PLIST_DATA node.
@@ -454,7 +468,7 @@
      *            caller is responsible for freeing it.
      * @param length the length of the buffer
      */
-    void plist_get_data_val(plist_t node, char **val, uint64_t * length);
+    PLIST_EXTERN void plist_get_data_val(plist_t node, char **val, uint64_t * length);
 
     /**
      * Get the value of a #PLIST_DATE node.
@@ -464,7 +478,7 @@
      * @param sec a pointer to an int32_t variable. Represents the number of seconds since 01/01/2001.
      * @param usec a pointer to an int32_t variable. Represents the number of microseconds
      */
-    void plist_get_date_val(plist_t node, int32_t * sec, int32_t * usec);
+    PLIST_EXTERN void plist_get_date_val(plist_t node, int32_t * sec, int32_t * usec);
 
     /**
      * Get the value of a #PLIST_UID node.
@@ -473,7 +487,7 @@
      * @param node the node
      * @param val a pointer to a uint64_t variable.
      */
-    void plist_get_uid_val(plist_t node, uint64_t * val);
+    PLIST_EXTERN void plist_get_uid_val(plist_t node, uint64_t * val);
 
 
     /********************************************
@@ -489,7 +503,7 @@
      * @param node the node
      * @param val the key value
      */
-    void plist_set_key_val(plist_t node, const char *val);
+    PLIST_EXTERN void plist_set_key_val(plist_t node, const char *val);
 
     /**
      * Set the value of a node.
@@ -499,7 +513,7 @@
      * @param val the string value. The string is copied when set and will be
      *		freed by the node.
      */
-    void plist_set_string_val(plist_t node, const char *val);
+    PLIST_EXTERN void plist_set_string_val(plist_t node, const char *val);
 
     /**
      * Set the value of a node.
@@ -508,7 +522,7 @@
      * @param node the node
      * @param val the boolean value
      */
-    void plist_set_bool_val(plist_t node, uint8_t val);
+    PLIST_EXTERN void plist_set_bool_val(plist_t node, uint8_t val);
 
     /**
      * Set the value of a node.
@@ -517,7 +531,7 @@
      * @param node the node
      * @param val the unsigned integer value
      */
-    void plist_set_uint_val(plist_t node, uint64_t val);
+    PLIST_EXTERN void plist_set_uint_val(plist_t node, uint64_t val);
 
     /**
      * Set the value of a node.
@@ -526,7 +540,7 @@
      * @param node the node
      * @param val the real value
      */
-    void plist_set_real_val(plist_t node, double val);
+    PLIST_EXTERN void plist_set_real_val(plist_t node, double val);
 
     /**
      * Set the value of a node.
@@ -537,7 +551,7 @@
      *		be freed by the node.
      * @param length the length of the buffer
      */
-    void plist_set_data_val(plist_t node, const char *val, uint64_t length);
+    PLIST_EXTERN void plist_set_data_val(plist_t node, const char *val, uint64_t length);
 
     /**
      * Set the value of a node.
@@ -547,7 +561,7 @@
      * @param sec the number of seconds since 01/01/2001
      * @param usec the number of microseconds
      */
-    void plist_set_date_val(plist_t node, int32_t sec, int32_t usec);
+    PLIST_EXTERN void plist_set_date_val(plist_t node, int32_t sec, int32_t usec);
 
     /**
      * Set the value of a node.
@@ -556,7 +570,7 @@
      * @param node the node
      * @param val the unsigned integer value
      */
-    void plist_set_uid_val(plist_t node, uint64_t val);
+    PLIST_EXTERN void plist_set_uid_val(plist_t node, uint64_t val);
 
 
     /********************************************
@@ -573,7 +587,7 @@
      *            caller is responsible for freeing it. Data is UTF-8 encoded.
      * @param length a pointer to an uint32_t variable. Represents the length of the allocated buffer.
      */
-    void plist_to_xml(plist_t plist, char **plist_xml, uint32_t * length);
+    PLIST_EXTERN void plist_to_xml(plist_t plist, char **plist_xml, uint32_t * length);
 
     /**
      * Export the #plist_t structure to binary format.
@@ -583,7 +597,7 @@
      *            caller is responsible for freeing it.
      * @param length a pointer to an uint32_t variable. Represents the length of the allocated buffer.
      */
-    void plist_to_bin(plist_t plist, char **plist_bin, uint32_t * length);
+    PLIST_EXTERN void plist_to_bin(plist_t plist, char **plist_bin, uint32_t * length);
 
     /**
      * Import the #plist_t structure from XML format.
@@ -592,7 +606,7 @@
      * @param length length of the buffer to read.
      * @param plist a pointer to the imported plist.
      */
-    void plist_from_xml(const char *plist_xml, uint32_t length, plist_t * plist);
+    PLIST_EXTERN void plist_from_xml(const char *plist_xml, uint32_t length, plist_t * plist);
 
     /**
      * Import the #plist_t structure from binary format.
@@ -601,7 +615,7 @@
      * @param length length of the buffer to read.
      * @param plist a pointer to the imported plist.
      */
-    void plist_from_bin(const char *plist_bin, uint32_t length, plist_t * plist);
+    PLIST_EXTERN void plist_from_bin(const char *plist_bin, uint32_t length, plist_t * plist);
 
 
     /********************************************
@@ -619,7 +633,7 @@
      * @param length length of the path to access
      * @return the value to access.
      */
-    plist_t plist_access_path(plist_t plist, uint32_t length, ...);
+    PLIST_EXTERN plist_t plist_access_path(plist_t plist, uint32_t length, ...);
 
     /**
      * Variadic version of #plist_access_path.
@@ -629,7 +643,7 @@
      * @param v list of array's index and dic'st key
      * @return the value to access.
      */
-    plist_t plist_access_pathv(plist_t plist, uint32_t length, va_list v);
+    PLIST_EXTERN plist_t plist_access_pathv(plist_t plist, uint32_t length, va_list v);
 
     /**
      * Compare two node values
@@ -638,7 +652,7 @@
      * @param node_r rigth node to compare
      * @return TRUE is type and value match, FALSE otherwise.
      */
-    char plist_compare_node_value(plist_t node_l, plist_t node_r);
+    PLIST_EXTERN char plist_compare_node_value(plist_t node_l, plist_t node_r);
 
     /*@}*/
 
--- a/src/bplist.c
+++ b/src/bplist.c
@@ -102,14 +102,15 @@ union plist_uint_ptr
     uint64_t *u64ptr;
 };
 
+#pragma pack(1)
 #define get_unaligned(ptr)			  \
   ({                                              \
-    struct __attribute__((packed)) {		  \
+    struct {		  \
       typeof(*(ptr)) __v;			  \
     } *__p = (void *) (ptr);			  \
     __p->__v;					  \
   })
-
+#pragma pack(pop)
 
 static void byte_convert(uint8_t * address, size_t size)
 {
@@ -127,8 +128,10 @@ static void byte_convert(uint8_t * address, size_t size)
 #endif
 }
 
-static uint32_t uint24_from_be(union plist_uint_ptr buf)
+static uint32_t uint24_from_be(void* p)
 {
+  union plist_uint_ptr buf;
+  buf.src = p;
     union plist_uint_ptr tmp;
     uint32_t ret = 0;
 
@@ -145,6 +148,11 @@ static uint32_t uint24_from_be(union plist_uint_ptr buf)
 #define be16toh(x) (x)
 #else
 #define be16toh(x) ((((x) & 0xFF00) >> 8) | (((x) & 0x00FF) << 8))
+static uint16_t uint16_toh(void *p)
+{
+  uint16_t x = *(uint16_t*)p;
+  return (((x & 0xFF00) >> 8) | ((x & 0x00FF) << 8));
+}
 #endif
 #endif
 
@@ -156,6 +164,14 @@ static uint32_t uint24_from_be(union plist_uint_ptr buf)
                     | (((x) & 0x00FF0000) >> 8) \
                     | (((x) & 0x0000FF00) << 8) \
                     | (((x) & 0x000000FF) << 24))
+static uint32_t uint32_toh(void* p)
+{
+  uint32_t x = *(uint32_t*)p;
+  return (((x & 0xFF000000) >> 24)
+    | ((x & 0x00FF0000) >> 8)
+    | ((x & 0x0000FF00) << 8)
+    | ((x & 0x000000FF) << 24));
+}
 #endif
 #endif
 
@@ -171,26 +187,29 @@ static uint32_t uint24_from_be(union plist_uint_ptr buf)
                     | (((x) & 0x0000000000FF0000ull) << 24) \
                     | (((x) & 0x000000000000FF00ull) << 40) \
                     | (((x) & 0x00000000000000FFull) << 56)) 
+static uint64_t uint64_toh(void* p)
+{
+  uint64_t x = *(uint64_t*)p;
+  return (((x & 0xFF00000000000000ull) >> 56)
+    | ((x & 0x00FF000000000000ull) >> 40)
+    | ((x & 0x0000FF0000000000ull) >> 24)
+    | ((x & 0x000000FF00000000ull) >> 8)
+    | ((x & 0x00000000FF000000ull) << 8)
+    | ((x & 0x0000000000FF0000ull) << 24)
+    | ((x & 0x000000000000FF00ull) << 40)
+    | ((x & 0x00000000000000FFull) << 56));
+}
 #endif
 #endif
 
 #define UINT_TO_HOST(x, n) \
-	({ \
-		union plist_uint_ptr __up; \
-		__up.src = x; \
-		(n == 8 ? be64toh( get_unaligned(__up.u64ptr) ) : \
-		(n == 4 ? be32toh( get_unaligned(__up.u32ptr) ) : \
-		(n == 3 ? uint24_from_be( __up ) : \
-		(n == 2 ? be16toh( get_unaligned(__up.u16ptr) ) : \
-		*__up.u8ptr )))); \
-	})
-
-#define be64dec(x) \
-	({ \
-		union plist_uint_ptr __up; \
-		__up.src = x; \
-		be64toh( get_unaligned(__up.u64ptr) ); \
-	})
+		(n == 8 ? uint64_toh(x) : \
+		(n == 4 ? uint32_toh(x) : \
+		(n == 3 ? uint24_from_be(x) : \
+		(n == 2 ? uint32_toh(x) : \
+		*(uint8_t*)x)))); \
+
+#define be64dec(x) uint64_toh(x);
 
 #define get_needed_bytes(x) \
 		( ((uint64_t)x) < (1ULL << 8) ? 1 : \
--- a/src/plist.h
+++ b/src/plist.h
@@ -30,7 +30,11 @@
 
 #include <sys/types.h>
 #include <sys/stat.h>
+#ifdef _MSC_VER
+#include <WinSock2.h> //for timeval
+#else
 #include <sys/time.h>
+#endif
 
 #ifdef _MSC_VER
 #pragma warning(disable:4996)
